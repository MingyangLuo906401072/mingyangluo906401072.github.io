[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Mingyang Luo",
    "section": "",
    "text": "Welcome to my blogs"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Hellow ML",
    "section": "",
    "text": "Earthquake Analysis\n\n\n\n\n\n\n\nRegression\n\n\n\n\n\n\n\n\n\n\n\nNov 18, 2023\n\n\nMingyang Luo\n\n\n\n\n\n\n  \n\n\n\n\nDry Beans Anaysis\n\n\n\n\n\n\n\nClassification\n\n\nClustering\n\n\nAnomaly Detection\n\n\n\n\n\n\n\n\n\n\n\nNov 8, 2023\n\n\nMingyang Luo\n\n\n\n\n\n\n  \n\n\n\n\nSpan Wines Anaysis\n\n\n\n\n\n\n\nClassification\n\n\nAnomaly Detection\n\n\n\n\n\n\n\n\n\n\n\nNov 8, 2023\n\n\nMingyang Luo\n\n\n\n\n\n\n  \n\n\n\n\nDisease Analysis\n\n\n\n\n\n\n\nClassification\n\n\nAnomaly Detection\n\n\nClustering\n\n\n\n\n\n\n\n\n\n\n\nNov 5, 2023\n\n\nMingyang Luo\n\n\n\n\n\n\n  \n\n\n\n\nReal Estate Analysis\n\n\n\n\n\n\n\nLinear Regression\n\n\nNon-linear Regression\n\n\n\n\n\n\n\n\n\n\n\nNov 5, 2023\n\n\nMingyang Luo\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Dry Beans Anaysis",
    "section": "",
    "text": "This is a post with executable code.\n\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nfrom sklearn.model_selection import learning_curve\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import accuracy_score, classification_report, roc_curve, auc, roc_auc_score\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport numpy as np\nfrom sklearn.decomposition import PCA\nfrom sklearn.cluster import KMeans\nimport scipy.cluster.hierarchy as sch\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import recall_score\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import ConfusionMatrixDisplay\nfrom sklearn.inspection import DecisionBoundaryDisplay\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import label_binarize\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\n\nexcel_file_path = \"DryBeanDataset/Dry_Bean_Dataset.xlsx\"\ndf = pd.read_excel(excel_file_path)\ndf\n\n\n\n\n\n\n\n\nArea\nPerimeter\nMajorAxisLength\nMinorAxisLength\nAspectRation\nEccentricity\nConvexArea\nEquivDiameter\nExtent\nSolidity\nroundness\nCompactness\nShapeFactor1\nShapeFactor2\nShapeFactor3\nShapeFactor4\nClass\n\n\n\n\n0\n28395\n610.291\n208.178117\n173.888747\n1.197191\n0.549812\n28715\n190.141097\n0.763923\n0.988856\n0.958027\n0.913358\n0.007332\n0.003147\n0.834222\n0.998724\nSEKER\n\n\n1\n28734\n638.018\n200.524796\n182.734419\n1.097356\n0.411785\n29172\n191.272750\n0.783968\n0.984986\n0.887034\n0.953861\n0.006979\n0.003564\n0.909851\n0.998430\nSEKER\n\n\n2\n29380\n624.110\n212.826130\n175.931143\n1.209713\n0.562727\n29690\n193.410904\n0.778113\n0.989559\n0.947849\n0.908774\n0.007244\n0.003048\n0.825871\n0.999066\nSEKER\n\n\n3\n30008\n645.884\n210.557999\n182.516516\n1.153638\n0.498616\n30724\n195.467062\n0.782681\n0.976696\n0.903936\n0.928329\n0.007017\n0.003215\n0.861794\n0.994199\nSEKER\n\n\n4\n30140\n620.134\n201.847882\n190.279279\n1.060798\n0.333680\n30417\n195.896503\n0.773098\n0.990893\n0.984877\n0.970516\n0.006697\n0.003665\n0.941900\n0.999166\nSEKER\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n13606\n42097\n759.696\n288.721612\n185.944705\n1.552728\n0.765002\n42508\n231.515799\n0.714574\n0.990331\n0.916603\n0.801865\n0.006858\n0.001749\n0.642988\n0.998385\nDERMASON\n\n\n13607\n42101\n757.499\n281.576392\n190.713136\n1.476439\n0.735702\n42494\n231.526798\n0.799943\n0.990752\n0.922015\n0.822252\n0.006688\n0.001886\n0.676099\n0.998219\nDERMASON\n\n\n13608\n42139\n759.321\n281.539928\n191.187979\n1.472582\n0.734065\n42569\n231.631261\n0.729932\n0.989899\n0.918424\n0.822730\n0.006681\n0.001888\n0.676884\n0.996767\nDERMASON\n\n\n13609\n42147\n763.779\n283.382636\n190.275731\n1.489326\n0.741055\n42667\n231.653248\n0.705389\n0.987813\n0.907906\n0.817457\n0.006724\n0.001852\n0.668237\n0.995222\nDERMASON\n\n\n13610\n42159\n772.237\n295.142741\n182.204716\n1.619841\n0.786693\n42600\n231.686223\n0.788962\n0.989648\n0.888380\n0.784997\n0.007001\n0.001640\n0.616221\n0.998180\nDERMASON\n\n\n\n\n13611 rows Ã— 17 columns\n\n\n\n\nnumeric_df = df.select_dtypes(include=['number'])\ncols = numeric_df.columns\nscaler = StandardScaler()\nnumeric_df = scaler.fit_transform(numeric_df)\npca = PCA(n_components=2)\ndf_pca = pca.fit_transform(numeric_df)\nnormalized_df = pd.DataFrame(numeric_df, columns=cols)\n\nplt.figure(figsize=(23, 6))  \npd.plotting.parallel_coordinates(normalized_df.join(df.Class), class_column='Class', colormap='hsv') \nplt.title('Standardized Parallel Coordinates Plot')\nplt.ylabel('Values')\nplt.show()\n\n\n\n\n\nkmeans = KMeans(n_clusters=7, random_state=42)\ndf['Cluster'] = kmeans.fit_predict(df_pca)\nlabels = kmeans.labels_\n\ncluster_centers = kmeans.cluster_centers_\n\ndistances = []\nfor i, label in enumerate(kmeans.labels_):\n    center = cluster_centers[label]\n    point = df_pca[i]\n    distance = np.linalg.norm(point - center)  # Euclidean distance\n    distances.append(distance)\n\nthreshold = np.percentile(distances, 99)  \nanomalies = df_pca[np.array(distances) &gt; threshold]\n\nplt.figure(figsize=(8, 6))\nplt.scatter(df_pca[:, 0], df_pca[:, 1], c=labels, cmap='viridis', marker='o', alpha=0.6)\nplt.scatter(cluster_centers[:, 0], cluster_centers[:, 1], s=100, c='cyan', marker='o', label='Cluster Centers')\nplt.xlabel(f'Principal Component 1 (Explained Variance: {pca.explained_variance_ratio_[0]:.3f}')\nplt.ylabel(f'Principal Component 2 (Explained Variance: {pca.explained_variance_ratio_[1]:.3f}')\nplt.title('Clustering of Dry Beans using KMeans with 7 clusters')\nplt.scatter(anomalies[:, 0], anomalies[:, 1], c='red', marker='x', s=100, label='Anomalies')\nplt.legend()\nplt.show()\n\n\n\n\n\nX1 = df_pca\ny1 = df['Class']\nlabel_encoder = LabelEncoder()\ny1 = label_encoder.fit_transform(y1)\nfeature_1, feature_2 = np.meshgrid(\n    np.linspace(X1[:, 0].min(), X1[:, 0].max()),\n    np.linspace(X1[:, 1].min(), X1[:, 1].max())\n)\ngrid = np.vstack([feature_1.ravel(), feature_2.ravel()]).T\ntree = DecisionTreeClassifier().fit(X1, y1)\ny_pred1 = tree.predict(grid)\ny_pred1 = y_pred1.reshape(feature_1.shape)\ndisplay = DecisionBoundaryDisplay(xx0=feature_1, xx1=feature_2, response=y_pred1)\ndisplay.plot()\nplt.scatter(X1[:, 0], X1[:, 1], c=y1, edgecolor=\"k\", s=10)\nplt.show()\n\n\n\n\n\ncluster_data = pd.DataFrame({'Cluster': df['Cluster'], 'Class': df['Class']})  \ncluster_summary = cluster_data.groupby('Cluster')['Class'].value_counts().unstack().fillna(0)\nprint(cluster_summary)\n\nClass    BARBUNYA  BOMBAY    CALI  DERMASON   HOROZ   SEKER    SIRA\nCluster                                                            \n0             9.0     0.0     2.0     116.0     0.0  1869.0    29.0\n1            12.0     0.0    23.0      12.0  1814.0     1.0    72.0\n2            98.0     0.0    13.0     457.0    52.0    77.0  2280.0\n3             1.0   520.0     0.0       0.0     0.0     0.0     0.0\n4             0.0     0.0     0.0    2961.0     3.0    77.0   249.0\n5           824.0     2.0   347.0       0.0     0.0     3.0     1.0\n6           378.0     0.0  1245.0       0.0    59.0     0.0     5.0\n\n\n\nX = numeric_df \ny = df['Class']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nclf = DecisionTreeClassifier(max_depth=8, random_state=42)\nclf.fit(X_train, y_train)\n\ny_scores = clf.predict_proba(X_test)\ny_pred = clf.predict(X_test)\n\ncm = confusion_matrix(y_test, y_pred, labels=clf.classes_)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=clf.classes_)\ndisp.plot(cmap='Blues', values_format='d')\nplt.show()\n\n\n\n\n\ny_bin = label_binarize(y_test, classes=clf.classes_)\n\nfpr = dict()\ntpr = dict()\nroc_auc = dict()\n\nfor i in range(len(clf.classes_)):\n    fpr[i], tpr[i], _ = roc_curve(y_bin[:, i], y_scores[:, i])\n    roc_auc[i] = auc(fpr[i], tpr[i])\n\n# Plot ROC curves\nplt.figure(figsize=(8, 6))\n\nfor i in range(len(clf.classes_)):\n    plt.plot(fpr[i], tpr[i], label=f'ROC curve (area = {roc_auc[i]:.2f}) for class {clf.classes_[i]}')\n\nplt.plot([0, 1], [0, 1], 'k--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic (ROC) Curve for Multiclass Classification')\nplt.legend(loc=\"lower right\")\nplt.show()\n\n\n\n\n\ntrain_sizes, train_scores, test_scores = learning_curve(clf, X_train, y_train, train_sizes=np.linspace(0.1, 1.0, 10), cv=5, scoring='accuracy')\n\ntrain_scores_mean = np.mean(train_scores, axis=1)\ntrain_scores_std = np.std(train_scores, axis=1)\ntest_scores_mean = np.mean(test_scores, axis=1)\ntest_scores_std = np.std(test_scores, axis=1)\n\nplt.figure()\nplt.title(\"Learning Curve\")\nplt.xlabel(\"Training examples\")\nplt.ylabel(\"Accuracy\")\n\nplt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\", label=\"Training score\")\nplt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\", label=\"Cross-validation score\")\n\nplt.fill_between(train_sizes, train_scores_mean - train_scores_std, train_scores_mean + train_scores_std, alpha=0.1, color=\"r\")\nplt.fill_between(train_sizes, test_scores_mean - test_scores_std, test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n\nplt.legend()\nplt.show()\n\n\n\n\n\nfrom IPython.display import Image\nimport pydot\nfrom sklearn.tree import export_graphviz\nimport graphviz\n\ndata=export_graphviz(\n    clf,\n    feature_names=df.drop(columns=['Class', 'Cluster']).columns,\n    class_names=clf.classes_,\n    rounded=True,\n    filled=True,\n    max_depth=4,\n)\n\ngraph = pydot.graph_from_dot_data(data)\nImage(graph[0].create_png())\n\n# graph = graphviz.Source(data)\n# graph.render(\"decision_tree\")\n\n\n\n\n\nroc_auc = roc_auc_score(y_test, y_scores, multi_class='ovo')  \nprint(f'ROC AUC Score: {roc_auc:.2f}')\n\nROC AUC Score: 0.98\n\n\n\nscores = cross_val_score(clf, X, y, cv=5, scoring='accuracy')\nmean_score = scores.mean()\nstd_score = scores.std()\nprint(f'Standard Error Score: {std_score:.2f}')\n\nStandard Error Score: 0.18\n\n\n\n# recall = recall_score(y_test, y_pred, average=None)\nrecall = recall_score(y_test, y_pred, average='macro')\nprint(f'Recall Score: {recall:.2f}')\n\nRecall Score: 0.91\n\n\n\nX_train1, X_test1, y_train1, y_test1 = train_test_split(X, y, test_size=0.2, random_state=42)\n\nclf1 = RandomForestClassifier(n_estimators=20, max_depth=8, random_state=42)\nclf1.fit(X_train1, y_train1)\n\ny_scores1 = clf1.predict_proba(X_test1)\n\nfpr1 = dict()\ntpr1 = dict()\nroc_auc1 = dict()\n\nfor i in range(len(clf1.classes_)):\n    fpr1[i], tpr1[i], _ = roc_curve((y_test1 == clf1.classes_[i]).astype(int), y_scores1[:, i])\n    roc_auc1[i] = auc(fpr1[i], tpr1[i])\n\nplt.figure(figsize=(8, 6))\n\nfor i in range(len(clf1.classes_)):\n    plt.plot(fpr1[i], tpr1[i], label=f'ROC curve (area = {roc_auc1[i]:.2f}) for class {clf1.classes_[i]}')\n\nplt.plot([0, 1], [0, 1], 'k--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic (ROC) Curve for Multiclass Classification')\nplt.legend(loc=\"lower right\")\nplt.show()\n\n\n\n\n\ntrain_sizes1, train_scores1, test_scores1 = learning_curve(clf1, X_train1, y_train1, train_sizes=np.linspace(0.1, 1.0, 10), cv=5, scoring='accuracy')\n\ntrain_scores_mean1 = np.mean(train_scores1, axis=1)\ntrain_scores_std1 = np.std(train_scores1, axis=1)\ntest_scores_mean1 = np.mean(test_scores1, axis=1)\ntest_scores_std1 = np.std(test_scores1, axis=1)\n\nplt.figure()\nplt.title(\"Learning Curve\")\nplt.xlabel(\"Training examples\")\nplt.ylabel(\"Accuracy\")\n\nplt.plot(train_sizes1, train_scores_mean1, 'o-', color=\"r\", label=\"Training score\")\nplt.plot(train_sizes1, test_scores_mean1, 'o-', color=\"g\", label=\"Cross-validation score\")\n\nplt.fill_between(train_sizes1, train_scores_mean1 - train_scores_std1, train_scores_mean1 + train_scores_std1, alpha=0.1, color=\"r\")\nplt.fill_between(train_sizes1, test_scores_mean1 - test_scores_std1, test_scores_mean1 + test_scores_std1, alpha=0.1, color=\"g\")\n\nplt.legend()\nplt.show()\n\n\n\n\n\ny_pred1 = clf1.predict(X_test1)\ncm1 = confusion_matrix(y_test1, y_pred1, labels=clf1.classes_)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm1, display_labels=clf1.classes_)\ndisp.plot(cmap='Purples', values_format='d')\nplt.show()\n\n\n\n\n\nscores = cross_val_score(clf, X, y, cv=5, scoring='accuracy')\nmean_score = scores.mean()\nstd_score = scores.std()\nprint(f'Standard Error Score: {std_score:.2f}')\n\nStandard Error Score: 0.18\n\n\n\nrecall = recall_score(y_test, y_pred, average='macro')\nprint(f'Recall Score: {recall:.2f}')\n\nRecall Score: 0.91\n\n\n\nroc_auc = roc_auc_score(y_test, y_scores, multi_class='ovo')  \nprint(f'ROC AUC Score: {roc_auc:.2f}')\n\nROC AUC Score: 0.98\n\n\n\nX_train2, X_test2, y_train2, y_test2 = train_test_split(X, y, test_size=0.2, random_state=42)\n\nclf2 = SVC(probability=True, C=0.2, random_state=42)\nclf2.fit(X_train2, y_train2)\n\ny_scores2 = clf2.predict_proba(X_test2)\n\nfpr2 = dict()\ntpr2 = dict()\nroc_auc2 = dict()\n\nfor i in range(len(clf2.classes_)):\n    fpr2[i], tpr2[i], _ = roc_curve((y_test2 == clf2.classes_[i]).astype(int), y_scores2[:, i])\n    roc_auc2[i] = auc(fpr2[i], tpr2[i])\n\nplt.figure(figsize=(8, 6))\n\nfor i in range(len(clf2.classes_)):\n    plt.plot(fpr2[i], tpr2[i], label=f'ROC curve (area = {roc_auc2[i]:.2f}) for class {clf2.classes_[i]}')\n\nplt.plot([0, 1], [0, 1], 'k--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic (ROC) Curve for Multiclass Classification')\nplt.legend(loc=\"lower right\")\nplt.show()"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesnâ€™t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/earthquakes/index.html",
    "href": "posts/earthquakes/index.html",
    "title": "Earthquake Analysis",
    "section": "",
    "text": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import learning_curve\nfrom sklearn.multioutput import MultiOutputRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.linear_model import Lasso\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\n\ncsv_file_path = \"earthquakes.csv\"\ndf = pd.read_csv(csv_file_path)\ndf\n\n\n\n\n\n\n\n\nid\nimpact.gap\nimpact.magnitude\nimpact.significance\nlocation.depth\nlocation.distance\nlocation.full\nlocation.latitude\nlocation.longitude\nlocation.name\ntime.day\ntime.epoch\ntime.full\ntime.hour\ntime.minute\ntime.month\ntime.second\ntime.year\n\n\n\n\n0\nnc72666881\n122.00\n1.43\n31\n15.12\n0.10340\n13km E of Livermore, California\n37.672333\n-121.619000\nCalifornia\n27\n1469593183550\n2016-07-27 00:19:43\n0\n19\n7\n43\n2016\n\n\n1\nus20006i0y\n30.00\n4.90\n371\n97.07\n1.43900\n58km WNW of Pakokku, Burma\n21.514600\n94.572100\nBurma\n27\n1469593228220\n2016-07-27 00:20:28\n0\n20\n7\n28\n2016\n\n\n2\nnc72666891\n249.00\n0.06\n0\n4.39\n0.02743\n12km SE of Mammoth Lakes, California\n37.576500\n-118.859167\nCalifornia\n27\n1469593897150\n2016-07-27 00:31:37\n0\n31\n7\n37\n2016\n\n\n3\nnc72666896\n122.00\n0.40\n2\n1.09\n0.02699\n6km SSW of Mammoth Lakes, California\n37.595833\n-118.994833\nCalifornia\n27\n1469594144150\n2016-07-27 00:35:44\n0\n35\n7\n44\n2016\n\n\n4\nnn00553447\n113.61\n0.30\n1\n7.60\n0.06300\n16km SSE of Mogul, Nevada\n39.377500\n-119.845000\nNevada\n27\n1469594519667\n2016-07-27 00:41:59\n0\n41\n7\n59\n2016\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n8389\nnc72685246\n47.00\n2.42\n90\n4.85\n0.06167\n22km ENE of Soledad, California\n36.515499\n-121.099831\nCalifornia\n25\n1472181541970\n2016-08-25 23:19:01\n23\n19\n8\n1\n2016\n\n\n8390\nak13879193\n0.00\n1.40\n30\n50.00\n0.00000\n5km ESE of Big Lake, Alaska\n61.498400\n-149.862700\nAlaska\n25\n1472181558000\n2016-08-25 23:19:18\n23\n19\n8\n18\n2016\n\n\n8391\nnc72685251\n165.00\n1.06\n17\n1.73\n0.02042\n6km WNW of The Geysers, California\n38.805000\n-122.821503\nCalifornia\n25\n1472182205600\n2016-08-25 23:30:05\n23\n30\n8\n5\n2016\n\n\n8392\nci37672328\n103.00\n1.55\n37\n29.25\n0.06980\n6km NNW of Chatsworth, CA\n34.308000\n-118.635333\nCalifornia\n25\n1472182571880\n2016-08-25 23:36:11\n23\n36\n8\n11\n2016\n\n\n8393\nci37672360\n99.00\n0.89\n12\n8.29\n0.02562\n14km NE of Yucaipa, CA\n34.119167\n-116.933667\nCalifornia\n25\n1472183881830\n2016-08-25 23:58:01\n23\n58\n8\n1\n2016\n\n\n\n\n8394 rows Ã— 18 columns\n\n\n\n\nnumeric = df.select_dtypes(include=['number'])\nscaler = StandardScaler()\nnumeric1 = scaler.fit_transform(numeric)\nnumeric_df = pd.DataFrame(numeric1)\nnumeric_df.columns = numeric.columns\nnumeric_df.columns\n\nIndex(['impact.gap', 'impact.magnitude', 'impact.significance',\n       'location.depth', 'location.distance', 'location.latitude',\n       'location.longitude', 'time.day', 'time.epoch', 'time.hour',\n       'time.minute', 'time.month', 'time.second', 'time.year'],\n      dtype='object')\n\n\n\nX = numeric_df[['location.depth', 'location.latitude','location.longitude', 'time.epoch', 'impact.gap']]\ny = numeric_df[['impact.magnitude', 'time.month', 'time.day']]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\npoly_model = MultiOutputRegressor(make_pipeline(PolynomialFeatures(2, include_bias=False), Lasso(alpha=0.4)))\npoly_model.fit(X_train, y_train)\n\npoly_predictions = poly_model.predict(X_test)\nmse = mean_squared_error(y_test, poly_predictions)\nprint(f\"Mean Squared Error: {mse}\")\n\nMean Squared Error: 0.6435738280241988\n\n\n\ntrain_sizes, train_scores, test_scores = learning_curve(poly_model, X, y, cv=5, scoring='neg_mean_squared_error')\n\ntrain_scores_mean = -train_scores.mean(axis=1)\ntest_scores_mean = -test_scores.mean(axis=1)\n\nplt.figure()\nplt.title(\"Learning Curve\")\nplt.xlabel(\"Training examples\")\nplt.ylabel(\"MSE\")\n\nplt.plot(train_sizes, train_scores_mean, label=\"Training error\")\nplt.plot(train_sizes, test_scores_mean, label=\"Cross-validation error\")\nplt.legend()\nplt.show()\n\n\n\n\n\ninput_features = ['location.depth', 'location.latitude', 'location.longitude', 'time.epoch', 'impact.gap']\noutput_variables = ['impact.magnitude', 'time.month', 'time.day']\n\nfor input_feat in input_features:\n    plt.figure(figsize=(8, 6))\n\n    for output_var in output_variables:\n        plt.scatter(X_test[input_feat], y_test[output_var], label=f'Actual {output_var}', alpha=0.6)\n        plt.scatter(X_test[input_feat], poly_predictions[:, output_variables.index(output_var)], label=f'Predicted {output_var}', alpha=0.6)\n\n        plt.xlabel(input_feat)\n        plt.ylabel('Output Variables')\n        plt.title(f'Output Variables vs {input_feat}')\n        plt.legend()\n\n    plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfor input_feat in input_features:\n    for output_var in output_variables:\n        plt.figure(figsize=(8, 6))\n        \n        # Plot the actual values\n        plt.scatter(X_test[input_feat], y_test[output_var], label=f'Actual {output_var}', alpha=0.6)\n        \n        # Plot the predicted values with a line\n        sorted_indices = X_test[input_feat].argsort()\n        plt.plot(X_test[input_feat].values[sorted_indices], poly_predictions[:, output_variables.index(output_var)][sorted_indices], \n                 label=f'Predicted {output_var}', color='red', lw=2)\n\n        plt.xlabel(input_feat)\n        plt.ylabel('Output Variables')\n        plt.title(f'Output Variables vs {input_feat}')\n        plt.legend()\n\n        plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsvm_model = MultiOutputRegressor(SVR(kernel='rbf', C=0.1))\n\nsvm_model.fit(X_train, y_train)\n\nsvm_predictions = svm_model.predict(X_test)\nmse = mean_squared_error(y_test, svm_predictions)\nprint(f\"Mean Squared Error with SVM: {mse}\")\n\nMean Squared Error with SVM: 0.30249069882639784\n\n\n\ntrain_sizes1, train_scores1, test_scores1 = learning_curve(svm_model, X, y, cv=3, scoring='neg_mean_squared_error')\n\ntrain_scores_mean1 = -train_scores1.mean(axis=1)\ntest_scores_mean1 = -test_scores1.mean(axis=1)\n\nplt.figure()\nplt.title(\"Learning Curve\")\nplt.xlabel(\"Training examples\")\nplt.ylabel(\"MSE\")\n\nplt.plot(train_sizes1, train_scores_mean1, label=\"Training error\")\nplt.plot(train_sizes1, test_scores_mean1, label=\"Cross-validation error\")\nplt.legend()\nplt.show()\n\n\n\n\n\nfor input_feat in input_features:\n    plt.figure(figsize=(8, 6))\n    \n    for output_var in output_variables:\n        # Get the actual and predicted values for the specific output variable\n        actual_values = y_test[output_var]\n        predicted_values = svm_predictions[:, output_variables.index(output_var)]\n        \n        plt.scatter(X_test[input_feat], actual_values, label=f'Actual {output_var}', alpha=0.6)\n        plt.scatter(X_test[input_feat], predicted_values, label=f'Predicted {output_var}', alpha=0.6)\n    \n    plt.xlabel(input_feat)\n    plt.ylabel('Output Variables')\n    plt.title(f'Output Variables vs {input_feat}')\n    plt.legend()\n    plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfor input_feat in input_features:\n    for output_var in output_variables:\n        plt.figure(figsize=(8, 6))\n        \n        # Plot the actual values\n        plt.scatter(X_test[input_feat], y_test[output_var], label=f'Actual {output_var}', alpha=0.6)\n        \n        # Plot the predicted values with a line\n        sorted_indices = X_test[input_feat].argsort()\n        plt.plot(X_test[input_feat].values[sorted_indices], svm_predictions[:, output_variables.index(output_var)][sorted_indices], \n                 label=f'Predicted {output_var}', color='red', lw=2)\n\n        plt.xlabel(input_feat)\n        plt.ylabel('Output Variables')\n        plt.title(f'Output Variables vs {input_feat}')\n        plt.legend()\n\n        plt.show()"
  },
  {
    "objectID": "posts/disease/index.html",
    "href": "posts/disease/index.html",
    "title": "Disease Analysis",
    "section": "",
    "text": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.decomposition import PCA\nfrom sklearn.mixture import GaussianMixture\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.inspection import DecisionBoundaryDisplay\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import ConfusionMatrixDisplay\nimport scipy.cluster.hierarchy as sch\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\n\ncsv_file_path = \"health.csv\"\ndf = pd.read_csv(csv_file_path)\ndf\n\n\n\n\n\n\n\n\ndisease\nincrease\nloc\nnumber\npopulation\nyear\n\n\n\n\n0\nMEASLES\n334.99\nALABAMA\n8843\n2640000\n1928\n\n\n1\nMEASLES\n200.75\nARIZONA\n847\n422000\n1928\n\n\n2\nMEASLES\n481.77\nARKANSAS\n8899\n1847000\n1928\n\n\n3\nMEASLES\n69.22\nCALIFORNIA\n3698\n5344000\n1928\n\n\n4\nMEASLES\n206.98\nCOLORADO\n2099\n1014000\n1928\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n14260\nPERTUSSIS\n2.06\nVIRGINIA\n171\n8096604\n2011\n\n\n14261\nPERTUSSIS\n10.68\nWASHINGTON\n731\n6830038\n2011\n\n\n14262\nPERTUSSIS\n1.99\nWEST VIRGINIA\n37\n1855364\n2011\n\n\n14263\nPERTUSSIS\n6.20\nWISCONSIN\n351\n5711767\n2011\n\n\n14264\nPERTUSSIS\n1.25\nWYOMING\n7\n568158\n2011\n\n\n\n\n14265 rows Ã— 6 columns\n\n\n\n\nprint(df['disease'].unique())\nprint(df['disease'].value_counts())\n\n['MEASLES' 'POLIO' 'SMALLPOX' 'PERTUSSIS' 'HEPATITIS A' 'RUBELLA' 'MUMPS']\ndisease\nMEASLES        3333\nPERTUSSIS      2716\nHEPATITIS A    2327\nPOLIO          1860\nMUMPS          1576\nRUBELLA        1374\nSMALLPOX       1079\nName: count, dtype: int64\n\n\n\nnumeric_df = df.select_dtypes(include=['number'])\ncols = numeric_df.columns\nscaler = StandardScaler()\nnormalized_data = scaler.fit_transform(numeric_df)\n\npca = PCA(n_components=2)\ndata_pca = pca.fit_transform(normalized_data)\n\nnormalized_df = pd.DataFrame(normalized_data, columns=cols)\nplt.figure(figsize=(8, 4))  \npd.plotting.parallel_coordinates(normalized_df.join(df.disease), class_column='disease', colormap='hsv') \nplt.title('Standardized Parallel Coordinates Plot')\nplt.ylabel('Values')\nplt.show()\n\n\n\n\n\nnum_samples = 1000 \nsample_indices = np.random.choice(data_pca.shape[0], num_samples, replace=False)\nsampled_data = data_pca[sample_indices]\n\nplt.figure(figsize=(8, 6)) \ndendrogram = sch.dendrogram(sch.linkage(sampled_data, method='ward'), orientation='right')  \nplt.title('Dendrogram (Sampled Data)')\nplt.xlabel('Euclidean Distances')\nplt.ylabel('Data Points')\nplt.show()\n\n\n\n\n\nexplained_variance = pca.explained_variance_ratio_\ncumulative_explained_variance = explained_variance.cumsum()\n\ngmm = GaussianMixture(n_components=7, random_state=42)\nclusters = gmm.fit_predict(data_pca)\n\nplt.figure(figsize=(8, 6))\nplt.scatter(data_pca[:, 0], data_pca[:, 1], c=clusters, cmap='viridis', alpha=0.7, s=40)\nplt.xlabel(f'Component 1\\nExplained Variance: {explained_variance[0]:.3f}, Cumulative Explained Variance: {cumulative_explained_variance[0]:.3f}')\nplt.ylabel(f'Component 2\\nExplained Variance: {explained_variance[1]:.3f}, Cumulative Explained Variance: {cumulative_explained_variance[1]:.3f}')\nplt.title('Gaussian Mixture Model Clustering after PCA Dimensionality Reduction')\nplt.colorbar(label='Clusters')\nplt.show()\n\n\n\n\n\nX1 = data_pca \ny1 = df['disease']\nlabel_encoder = LabelEncoder()\ny1 = label_encoder.fit_transform(y1)\nfeature_1, feature_2 = np.meshgrid(\n    np.linspace(X1[:, 0].min(), X1[:, 0].max()),\n    np.linspace(X1[:, 1].min(), X1[:, 1].max())\n)\ngrid = np.vstack([feature_1.ravel(), feature_2.ravel()]).T\ntree = DecisionTreeClassifier().fit(X1, y1)\ny_pred1 = tree.predict(grid)\ny_pred1 = y_pred1.reshape(feature_1.shape)\ndisplay = DecisionBoundaryDisplay(xx0=feature_1, xx1=feature_2, response=y_pred1)\ndisplay.plot()\nplt.scatter(X1[:, 0], X1[:, 1], c=y1, edgecolor=\"k\", s=10)\nplt.show()\n\n\n\n\n\ncluster_data = pd.DataFrame({'Cluster': clusters, 'Class': df['disease']}) \ncluster_summary = cluster_data.groupby('Cluster')['Class'].value_counts().unstack().fillna(0)\nprint(cluster_summary)\n\nClass    HEPATITIS A  MEASLES   MUMPS  PERTUSSIS   POLIO  RUBELLA  SMALLPOX\nCluster                                                                    \n0               11.0    216.0    31.0      360.0  1169.0     14.0     859.0\n1             1658.0   1056.0  1047.0     1285.0   360.0    960.0       0.0\n2                6.0    271.0     5.0        8.0     0.0      2.0       0.0\n3              247.0    194.0   177.0      157.0   158.0    194.0      42.0\n4                0.0    687.0    23.0      121.0     5.0      1.0       0.0\n5               16.0    722.0    70.0      363.0   168.0     41.0     178.0\n6              389.0    187.0   223.0      422.0     0.0    162.0       0.0\n\n\n\ndensities = gmm.score_samples(data_pca)\n\nlower_bound = np.percentile(densities, 0.1)\nanomalies = data_pca[densities &lt; lower_bound]\n\nprint(\"Anomalies:\", anomalies, \"\\n Shape:\", anomalies.shape) \n\nAnomalies: [[10.07872492  0.71333442]\n [14.05229786  5.03523068]\n [12.43006816  6.13229002]\n [13.0640971   1.21331516]\n [13.35301494  6.05062185]\n [13.4855688   4.98454229]\n [18.11348029  9.06984412]\n [16.51090648  5.02577769]\n [13.18315682  7.65367663]\n [13.70015428  6.97071012]\n [14.00925655  6.42533074]\n [11.84210663  1.36010773]\n [10.08348551  0.71877513]\n [10.17446008  7.08024078]\n [-0.37423383  5.14443646]] \n Shape: (15, 2)\n\n\n\nplt.figure(figsize=(8, 6))\nplt.scatter(data_pca[:, 0], data_pca[:, 1], c=clusters, cmap='viridis', alpha=0.7, s=40)\nplt.xlabel(f'Component 1\\nExplained Variance: {explained_variance[0]:.3f}, Cumulative Explained Variance: {cumulative_explained_variance[0]:.3f}')\nplt.ylabel(f'Component 2\\nExplained Variance: {explained_variance[1]:.3f}, Cumulative Explained Variance: {cumulative_explained_variance[1]:.3f}')\nplt.title('Gaussian Mixture Model Clustering after PCA Dimensionality Reduction')\nplt.colorbar(label='Clusters')\n\nplt.scatter(anomalies[:, 0], anomalies[:, 1], c='red', marker='x', s=100, label='Anomalies')\nplt.legend()\nplt.show()\n\n\n\n\n\nlabels = df['disease']\n\nclassifier = DecisionTreeClassifier(random_state=42)\nclassifier.fit(normalized_data, labels)\n\npredicted_labels = classifier.predict(normalized_data)\nconf_matrix = confusion_matrix(labels, predicted_labels)\n\ndisp = ConfusionMatrixDisplay(conf_matrix, display_labels=classifier.classes_)\ndisp.plot(cmap='viridis', values_format='.0f')\nplt.title('Confusion Matrix for Decision Tree Classifier')\nplt.show()"
  },
  {
    "objectID": "posts/dry_beans/index.html",
    "href": "posts/dry_beans/index.html",
    "title": "Dry Beans Anaysis",
    "section": "",
    "text": "This is a post with executable code.\n\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nfrom sklearn.model_selection import learning_curve\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import accuracy_score, classification_report, roc_curve, auc, roc_auc_score\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport numpy as np\nfrom sklearn.decomposition import PCA\nfrom sklearn.cluster import KMeans\nimport scipy.cluster.hierarchy as sch\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import recall_score\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import ConfusionMatrixDisplay\nfrom sklearn.inspection import DecisionBoundaryDisplay\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import label_binarize\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\n\nexcel_file_path = \"DryBeanDataset/Dry_Bean_Dataset.xlsx\"\ndf = pd.read_excel(excel_file_path)\ndf\n\n\n\n\n\n\n\n\nArea\nPerimeter\nMajorAxisLength\nMinorAxisLength\nAspectRation\nEccentricity\nConvexArea\nEquivDiameter\nExtent\nSolidity\nroundness\nCompactness\nShapeFactor1\nShapeFactor2\nShapeFactor3\nShapeFactor4\nClass\n\n\n\n\n0\n28395\n610.291\n208.178117\n173.888747\n1.197191\n0.549812\n28715\n190.141097\n0.763923\n0.988856\n0.958027\n0.913358\n0.007332\n0.003147\n0.834222\n0.998724\nSEKER\n\n\n1\n28734\n638.018\n200.524796\n182.734419\n1.097356\n0.411785\n29172\n191.272750\n0.783968\n0.984986\n0.887034\n0.953861\n0.006979\n0.003564\n0.909851\n0.998430\nSEKER\n\n\n2\n29380\n624.110\n212.826130\n175.931143\n1.209713\n0.562727\n29690\n193.410904\n0.778113\n0.989559\n0.947849\n0.908774\n0.007244\n0.003048\n0.825871\n0.999066\nSEKER\n\n\n3\n30008\n645.884\n210.557999\n182.516516\n1.153638\n0.498616\n30724\n195.467062\n0.782681\n0.976696\n0.903936\n0.928329\n0.007017\n0.003215\n0.861794\n0.994199\nSEKER\n\n\n4\n30140\n620.134\n201.847882\n190.279279\n1.060798\n0.333680\n30417\n195.896503\n0.773098\n0.990893\n0.984877\n0.970516\n0.006697\n0.003665\n0.941900\n0.999166\nSEKER\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n13606\n42097\n759.696\n288.721612\n185.944705\n1.552728\n0.765002\n42508\n231.515799\n0.714574\n0.990331\n0.916603\n0.801865\n0.006858\n0.001749\n0.642988\n0.998385\nDERMASON\n\n\n13607\n42101\n757.499\n281.576392\n190.713136\n1.476439\n0.735702\n42494\n231.526798\n0.799943\n0.990752\n0.922015\n0.822252\n0.006688\n0.001886\n0.676099\n0.998219\nDERMASON\n\n\n13608\n42139\n759.321\n281.539928\n191.187979\n1.472582\n0.734065\n42569\n231.631261\n0.729932\n0.989899\n0.918424\n0.822730\n0.006681\n0.001888\n0.676884\n0.996767\nDERMASON\n\n\n13609\n42147\n763.779\n283.382636\n190.275731\n1.489326\n0.741055\n42667\n231.653248\n0.705389\n0.987813\n0.907906\n0.817457\n0.006724\n0.001852\n0.668237\n0.995222\nDERMASON\n\n\n13610\n42159\n772.237\n295.142741\n182.204716\n1.619841\n0.786693\n42600\n231.686223\n0.788962\n0.989648\n0.888380\n0.784997\n0.007001\n0.001640\n0.616221\n0.998180\nDERMASON\n\n\n\n\n13611 rows Ã— 17 columns\n\n\n\n\nnumeric_df = df.select_dtypes(include=['number'])\ncols = numeric_df.columns\nscaler = StandardScaler()\nnumeric_df = scaler.fit_transform(numeric_df)\npca = PCA(n_components=2)\ndf_pca = pca.fit_transform(numeric_df)\nnormalized_df = pd.DataFrame(numeric_df, columns=cols)\n\nplt.figure(figsize=(23, 6))  \npd.plotting.parallel_coordinates(normalized_df.join(df.Class), class_column='Class', colormap='hsv') \nplt.title('Standardized Parallel Coordinates Plot')\nplt.ylabel('Values')\nplt.show()\n\n\n\n\n\nkmeans = KMeans(n_clusters=7, random_state=42)\ndf['Cluster'] = kmeans.fit_predict(df_pca)\nlabels = kmeans.labels_\n\ncluster_centers = kmeans.cluster_centers_\n\ndistances = []\nfor i, label in enumerate(kmeans.labels_):\n    center = cluster_centers[label]\n    point = df_pca[i]\n    distance = np.linalg.norm(point - center)  # Euclidean distance\n    distances.append(distance)\n\nthreshold = np.percentile(distances, 99)  \nanomalies = df_pca[np.array(distances) &gt; threshold]\n\nplt.figure(figsize=(8, 6))\nplt.scatter(df_pca[:, 0], df_pca[:, 1], c=labels, cmap='viridis', marker='o', alpha=0.6)\nplt.scatter(cluster_centers[:, 0], cluster_centers[:, 1], s=100, c='cyan', marker='o', label='Cluster Centers')\nplt.xlabel(f'Principal Component 1 (Explained Variance: {pca.explained_variance_ratio_[0]:.3f}')\nplt.ylabel(f'Principal Component 2 (Explained Variance: {pca.explained_variance_ratio_[1]:.3f}')\nplt.title('Clustering of Dry Beans using KMeans with 7 clusters')\nplt.scatter(anomalies[:, 0], anomalies[:, 1], c='red', marker='x', s=100, label='Anomalies')\nplt.legend()\nplt.show()\n\n\n\n\n\nX1 = df_pca\ny1 = df['Class']\nlabel_encoder = LabelEncoder()\ny1 = label_encoder.fit_transform(y1)\nfeature_1, feature_2 = np.meshgrid(\n    np.linspace(X1[:, 0].min(), X1[:, 0].max()),\n    np.linspace(X1[:, 1].min(), X1[:, 1].max())\n)\ngrid = np.vstack([feature_1.ravel(), feature_2.ravel()]).T\ntree = DecisionTreeClassifier().fit(X1, y1)\ny_pred1 = tree.predict(grid)\ny_pred1 = y_pred1.reshape(feature_1.shape)\ndisplay = DecisionBoundaryDisplay(xx0=feature_1, xx1=feature_2, response=y_pred1)\ndisplay.plot()\nplt.scatter(X1[:, 0], X1[:, 1], c=y1, edgecolor=\"k\", s=10)\nplt.show()\n\n\n\n\n\ncluster_data = pd.DataFrame({'Cluster': df['Cluster'], 'Class': df['Class']})  \ncluster_summary = cluster_data.groupby('Cluster')['Class'].value_counts().unstack().fillna(0)\nprint(cluster_summary)\n\nClass    BARBUNYA  BOMBAY    CALI  DERMASON   HOROZ   SEKER    SIRA\nCluster                                                            \n0             9.0     0.0     2.0     116.0     0.0  1869.0    29.0\n1            12.0     0.0    23.0      12.0  1814.0     1.0    72.0\n2            98.0     0.0    13.0     457.0    52.0    77.0  2280.0\n3             1.0   520.0     0.0       0.0     0.0     0.0     0.0\n4             0.0     0.0     0.0    2961.0     3.0    77.0   249.0\n5           824.0     2.0   347.0       0.0     0.0     3.0     1.0\n6           378.0     0.0  1245.0       0.0    59.0     0.0     5.0\n\n\n\nX = numeric_df \ny = df['Class']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nclf = DecisionTreeClassifier(max_depth=8, random_state=42)\nclf.fit(X_train, y_train)\n\ny_scores = clf.predict_proba(X_test)\ny_pred = clf.predict(X_test)\n\ncm = confusion_matrix(y_test, y_pred, labels=clf.classes_)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=clf.classes_)\ndisp.plot(cmap='Blues', values_format='d')\nplt.show()\n\n\n\n\n\ny_bin = label_binarize(y_test, classes=clf.classes_)\n\nfpr = dict()\ntpr = dict()\nroc_auc = dict()\n\nfor i in range(len(clf.classes_)):\n    fpr[i], tpr[i], _ = roc_curve(y_bin[:, i], y_scores[:, i])\n    roc_auc[i] = auc(fpr[i], tpr[i])\n\n# Plot ROC curves\nplt.figure(figsize=(8, 6))\n\nfor i in range(len(clf.classes_)):\n    plt.plot(fpr[i], tpr[i], label=f'ROC curve (area = {roc_auc[i]:.2f}) for class {clf.classes_[i]}')\n\nplt.plot([0, 1], [0, 1], 'k--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic (ROC) Curve for Multiclass Classification')\nplt.legend(loc=\"lower right\")\nplt.show()\n\n\n\n\n\ntrain_sizes, train_scores, test_scores = learning_curve(clf, X_train, y_train, train_sizes=np.linspace(0.1, 1.0, 10), cv=5, scoring='accuracy')\n\ntrain_scores_mean = np.mean(train_scores, axis=1)\ntrain_scores_std = np.std(train_scores, axis=1)\ntest_scores_mean = np.mean(test_scores, axis=1)\ntest_scores_std = np.std(test_scores, axis=1)\n\nplt.figure()\nplt.title(\"Learning Curve\")\nplt.xlabel(\"Training examples\")\nplt.ylabel(\"Accuracy\")\n\nplt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\", label=\"Training score\")\nplt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\", label=\"Cross-validation score\")\n\nplt.fill_between(train_sizes, train_scores_mean - train_scores_std, train_scores_mean + train_scores_std, alpha=0.1, color=\"r\")\nplt.fill_between(train_sizes, test_scores_mean - test_scores_std, test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n\nplt.legend()\nplt.show()\n\n\n\n\n\nfrom IPython.display import Image\nimport pydot\nfrom sklearn.tree import export_graphviz\nimport graphviz\n\ndata=export_graphviz(\n    clf,\n    feature_names=df.drop(columns=['Class', 'Cluster']).columns,\n    class_names=clf.classes_,\n    rounded=True,\n    filled=True,\n    max_depth=4,\n)\n\ngraph = pydot.graph_from_dot_data(data)\nImage(graph[0].create_png())\n\n# graph = graphviz.Source(data)\n# graph.render(\"decision_tree\")\n\n\n\n\n\nroc_auc = roc_auc_score(y_test, y_scores, multi_class='ovo')  \nprint(f'ROC AUC Score: {roc_auc:.2f}')\n\nROC AUC Score: 0.98\n\n\n\nscores = cross_val_score(clf, X, y, cv=5, scoring='accuracy')\nmean_score = scores.mean()\nstd_score = scores.std()\nprint(f'Standard Error Score: {std_score:.2f}')\n\nStandard Error Score: 0.18\n\n\n\n# recall = recall_score(y_test, y_pred, average=None)\nrecall = recall_score(y_test, y_pred, average='macro')\nprint(f'Recall Score: {recall:.2f}')\n\nRecall Score: 0.91\n\n\n\nX_train1, X_test1, y_train1, y_test1 = train_test_split(X, y, test_size=0.2, random_state=42)\n\nclf1 = RandomForestClassifier(n_estimators=20, max_depth=8, random_state=42)\nclf1.fit(X_train1, y_train1)\n\ny_scores1 = clf1.predict_proba(X_test1)\n\nfpr1 = dict()\ntpr1 = dict()\nroc_auc1 = dict()\n\nfor i in range(len(clf1.classes_)):\n    fpr1[i], tpr1[i], _ = roc_curve((y_test1 == clf1.classes_[i]).astype(int), y_scores1[:, i])\n    roc_auc1[i] = auc(fpr1[i], tpr1[i])\n\nplt.figure(figsize=(8, 6))\n\nfor i in range(len(clf1.classes_)):\n    plt.plot(fpr1[i], tpr1[i], label=f'ROC curve (area = {roc_auc1[i]:.2f}) for class {clf1.classes_[i]}')\n\nplt.plot([0, 1], [0, 1], 'k--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic (ROC) Curve for Multiclass Classification')\nplt.legend(loc=\"lower right\")\nplt.show()\n\n\n\n\n\ntrain_sizes1, train_scores1, test_scores1 = learning_curve(clf1, X_train1, y_train1, train_sizes=np.linspace(0.1, 1.0, 10), cv=5, scoring='accuracy')\n\ntrain_scores_mean1 = np.mean(train_scores1, axis=1)\ntrain_scores_std1 = np.std(train_scores1, axis=1)\ntest_scores_mean1 = np.mean(test_scores1, axis=1)\ntest_scores_std1 = np.std(test_scores1, axis=1)\n\nplt.figure()\nplt.title(\"Learning Curve\")\nplt.xlabel(\"Training examples\")\nplt.ylabel(\"Accuracy\")\n\nplt.plot(train_sizes1, train_scores_mean1, 'o-', color=\"r\", label=\"Training score\")\nplt.plot(train_sizes1, test_scores_mean1, 'o-', color=\"g\", label=\"Cross-validation score\")\n\nplt.fill_between(train_sizes1, train_scores_mean1 - train_scores_std1, train_scores_mean1 + train_scores_std1, alpha=0.1, color=\"r\")\nplt.fill_between(train_sizes1, test_scores_mean1 - test_scores_std1, test_scores_mean1 + test_scores_std1, alpha=0.1, color=\"g\")\n\nplt.legend()\nplt.show()\n\n\n\n\n\ny_pred1 = clf1.predict(X_test1)\ncm1 = confusion_matrix(y_test1, y_pred1, labels=clf1.classes_)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm1, display_labels=clf1.classes_)\ndisp.plot(cmap='Purples', values_format='d')\nplt.show()\n\n\n\n\n\nscores = cross_val_score(clf, X, y, cv=5, scoring='accuracy')\nmean_score = scores.mean()\nstd_score = scores.std()\nprint(f'Standard Error Score: {std_score:.2f}')\n\nStandard Error Score: 0.18\n\n\n\nrecall = recall_score(y_test, y_pred, average='macro')\nprint(f'Recall Score: {recall:.2f}')\n\nRecall Score: 0.91\n\n\n\nroc_auc = roc_auc_score(y_test, y_scores, multi_class='ovo')  \nprint(f'ROC AUC Score: {roc_auc:.2f}')\n\nROC AUC Score: 0.98\n\n\n\nX_train2, X_test2, y_train2, y_test2 = train_test_split(X, y, test_size=0.2, random_state=42)\n\nclf2 = SVC(probability=True, C=0.2, random_state=42)\nclf2.fit(X_train2, y_train2)\n\ny_scores2 = clf2.predict_proba(X_test2)\n\nfpr2 = dict()\ntpr2 = dict()\nroc_auc2 = dict()\n\nfor i in range(len(clf2.classes_)):\n    fpr2[i], tpr2[i], _ = roc_curve((y_test2 == clf2.classes_[i]).astype(int), y_scores2[:, i])\n    roc_auc2[i] = auc(fpr2[i], tpr2[i])\n\nplt.figure(figsize=(8, 6))\n\nfor i in range(len(clf2.classes_)):\n    plt.plot(fpr2[i], tpr2[i], label=f'ROC curve (area = {roc_auc2[i]:.2f}) for class {clf2.classes_[i]}')\n\nplt.plot([0, 1], [0, 1], 'k--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver Operating Characteristic (ROC) Curve for Multiclass Classification')\nplt.legend(loc=\"lower right\")\nplt.show()"
  },
  {
    "objectID": "posts/realEstate/index.html",
    "href": "posts/realEstate/index.html",
    "title": "Real Estate Analysis",
    "section": "",
    "text": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import learning_curve\nfrom sklearn.decomposition import PCA\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\n\ncsv_file_path = \"real_estate.csv\"\ndf = pd.read_csv(csv_file_path)\ndf.drop('No', axis=1, inplace=True)\ndf\n\n\n\n\n\n\n\n\nX1 transaction date\nX2 house age\nX3 distance to the nearest MRT station\nX4 number of convenience stores\nX5 latitude\nX6 longitude\nY house price of unit area\n\n\n\n\n0\n2012.917\n32.0\n84.87882\n10\n24.98298\n121.54024\n37.9\n\n\n1\n2012.917\n19.5\n306.59470\n9\n24.98034\n121.53951\n42.2\n\n\n2\n2013.583\n13.3\n561.98450\n5\n24.98746\n121.54391\n47.3\n\n\n3\n2013.500\n13.3\n561.98450\n5\n24.98746\n121.54391\n54.8\n\n\n4\n2012.833\n5.0\n390.56840\n5\n24.97937\n121.54245\n43.1\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n409\n2013.000\n13.7\n4082.01500\n0\n24.94155\n121.50381\n15.4\n\n\n410\n2012.667\n5.6\n90.45606\n9\n24.97433\n121.54310\n50.0\n\n\n411\n2013.250\n18.8\n390.96960\n7\n24.97923\n121.53986\n40.6\n\n\n412\n2013.000\n8.1\n104.81010\n5\n24.96674\n121.54067\n52.5\n\n\n413\n2013.500\n6.5\n90.45606\n9\n24.97433\n121.54310\n63.9\n\n\n\n\n414 rows Ã— 7 columns\n\n\n\n\nX = df.drop('Y house price of unit area', axis=1)\nY = df['Y house price of unit area']\n\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\n\npca = PCA(n_components=2)  \nX_pca = pca.fit_transform(X_scaled)\n\nplt.figure(figsize=(8, 6))\nplt.scatter(X_pca[:, 0], X_pca[:, 1], c=Y, cmap='viridis')\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\nplt.title('PCA Visualization')\nplt.colorbar(label='house price of unit area')\nplt.show()\n\n\n\n\n\nX_pca = pd.DataFrame(X_pca)\nX_pca_with_date = pd.concat([X_pca, X['X1 transaction date']], axis=1)\n\nX_train_pca, X_test_pca, Y_train, Y_test = train_test_split(X_pca_with_date, Y, test_size=0.2, random_state=42)\n\nX_train_without_date = X_train_pca.drop('X1 transaction date', axis=1)\nX_test_without_date = X_test_pca.drop('X1 transaction date', axis=1)\nX_test_dates = X_test_pca['X1 transaction date']\n\nmodel = LinearRegression()\nmodel.fit(X_train_without_date, Y_train)\n\npredictions = model.predict(X_test_without_date)\n\nplt.figure(figsize=(8, 6))\n\nplt.scatter(range(len(Y_test)), Y_test, color='blue', label='Actual')\nplt.plot(range(len(Y_test)), model.predict(X_test_without_date), color='green', label='Regression Line')\n\nplt.xlabel('Data Points')\nplt.ylabel('Y house price of unit area')\nplt.title('Actual vs. Predicted Price')\nplt.legend()\nplt.show()\n\n\n\n\n\nsorted_indices = np.argsort(X_test_dates)\nsorted_dates = X_test_dates.iloc[sorted_indices]\nsorted_predictions = predictions[sorted_indices]\n\nplt.figure(figsize=(8, 6))\nplt.scatter(sorted_dates, Y_test.iloc[sorted_indices], color='red', label='Actual')\nplt.plot(sorted_dates, sorted_predictions, color='orange', label='Sorted Regression Line')\nplt.xlabel('Transaction Date')\nplt.ylabel('Y house price of unit area')\nplt.title('Actual vs. Predicted Price (Sorted by Date)')\nplt.legend()\nplt.show()\n\n\n\n\n\ndef plot_learning_curve(estimator, X, y):\n    train_sizes, train_scores, val_scores = learning_curve(\n        estimator, X, y, train_sizes=np.linspace(0.1, 1.0, 10), cv=5)\n\n    train_scores_mean = np.mean(train_scores, axis=1)\n    val_scores_mean = np.mean(val_scores, axis=1)\n    train_scores_std = np.std(train_scores, axis=1)\n    val_scores_std = np.std(val_scores, axis=1)\n    val_scores_var_squared = val_scores_std ** 2\n\n    plt.figure(figsize=(8, 6))\n    plt.plot(train_sizes, train_scores_mean, label='Training Score', color='blue')\n    plt.plot(train_sizes, val_scores_mean, label='Cross-Validation Score', color='orange')\n\n    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n                     train_scores_mean + train_scores_std, alpha=0.3, color='blue')\n    plt.fill_between(train_sizes, val_scores_mean - val_scores_std,\n                     val_scores_mean + val_scores_std, alpha=0.3, color='orange')\n\n    plt.xlabel('Training Set Size')\n    plt.ylabel('Score')\n    plt.title('Learning Curve with Std Dev and Squared Variance')\n    plt.legend()\n    plt.grid(True)\n    plt.show()\n\nplot_learning_curve(model, X_train_without_date, Y_train)\n\n\n\n\n\nforest_model = RandomForestRegressor(n_estimators=100, random_state=42)  \nforest_model.fit(X_train_without_date, Y_train)\n\nforest_predictions = forest_model.predict(X_test_without_date)\n\nyears_test = X_test_dates\n\nplt.figure(figsize=(10, 6))\nplt.scatter(years_test, Y_test, alpha=0.7, c='blueviolet', label='Actual')\n\nsorted_indices = np.argsort(years_test)\nsorted_predictions = forest_predictions[sorted_indices]\nsorted_dates = years_test.iloc[sorted_indices].values\nprint(f\"test transaction dates:\\n{sorted_dates}\")\n\nplt.plot(years_test.iloc[sorted_indices], sorted_predictions, color='deeppink', label='Predicted')\n\nplt.xlabel('Year')\nplt.ylabel('Y house price of unit area')\nplt.title('Actual vs. Predicted Price (Linear Regression)')\nplt.legend()\nplt.grid(True)\nplt.show()\n\ntest transaction dates:\n[2012.667 2012.667 2012.667 2012.667 2012.667 2012.667 2012.667 2012.75\n 2012.75  2012.75  2012.75  2012.75  2012.75  2012.75  2012.833 2012.833\n 2012.833 2012.833 2012.833 2012.833 2012.833 2012.917 2012.917 2012.917\n 2012.917 2012.917 2012.917 2012.917 2012.917 2012.917 2012.917 2012.917\n 2012.917 2012.917 2013.    2013.    2013.    2013.    2013.    2013.083\n 2013.083 2013.083 2013.083 2013.083 2013.083 2013.083 2013.083 2013.083\n 2013.083 2013.083 2013.083 2013.167 2013.167 2013.167 2013.167 2013.167\n 2013.167 2013.25  2013.25  2013.25  2013.25  2013.25  2013.25  2013.25\n 2013.333 2013.333 2013.417 2013.417 2013.417 2013.417 2013.417 2013.417\n 2013.417 2013.5   2013.5   2013.5   2013.5   2013.583 2013.583 2013.583\n 2013.583 2013.583 2013.583]\n\n\n\n\n\n\nplot_learning_curve(forest_model, X_train_without_date, Y_train)"
  },
  {
    "objectID": "posts/span_wines/index.html",
    "href": "posts/span_wines/index.html",
    "title": "Span Wines Anaysis",
    "section": "",
    "text": "This is a post with executable code.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.decomposition import PCA\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score, recall_score, classification_report\nfrom sklearn.model_selection import learning_curve\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.svm import OneClassSVM\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\ncsv_file_path = \"wines_SPA.csv\"\ndf = pd.read_csv(csv_file_path)\ndf\n\n\n\n\n\n\n\n\nwinery\nwine\nyear\nrating\nnum_reviews\ncountry\nregion\nprice\ntype\nbody\nacidity\n\n\n\n\n0\nTeso La Monja\nTinto\n2013\n4.9\n58\nEspana\nToro\n995.00\nToro Red\n5.0\n3.0\n\n\n1\nArtadi\nVina El Pison\n2018\n4.9\n31\nEspana\nVino de Espana\n313.50\nTempranillo\n4.0\n2.0\n\n\n2\nVega Sicilia\nUnico\n2009\n4.8\n1793\nEspana\nRibera del Duero\n324.95\nRibera Del Duero Red\n5.0\n3.0\n\n\n3\nVega Sicilia\nUnico\n1999\n4.8\n1705\nEspana\nRibera del Duero\n692.96\nRibera Del Duero Red\n5.0\n3.0\n\n\n4\nVega Sicilia\nUnico\n1996\n4.8\n1309\nEspana\nRibera del Duero\n778.06\nRibera Del Duero Red\n5.0\n3.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n7495\nContino\nReserva\n2016\n4.2\n392\nEspana\nRioja\n19.98\nRioja Red\n4.0\n3.0\n\n\n7496\nConreria d'Scala Dei\nLes Brugueres\n2018\n4.2\n390\nEspana\nPriorato\n16.76\nPriorat Red\n4.0\n3.0\n\n\n7497\nMustiguillo\nFinca Terrerazo\n2017\n4.2\n390\nEspana\nEl Terrerazo\n24.45\nRed\n4.0\n3.0\n\n\n7498\nMatarromera\nGran Reserva\n2011\n4.2\n389\nEspana\nRibera del Duero\n64.50\nRibera Del Duero Red\n5.0\n3.0\n\n\n7499\nSei Solo\nPreludio\n2016\n4.2\n388\nEspana\nRibera del Duero\n31.63\nRibera Del Duero Red\n5.0\n3.0\n\n\n\n\n7500 rows Ã— 11 columns\n\n\n\n\nunique_country = df['country'].nunique()\nprint(f\"Number of unique country: {unique_country}\")\n\nNumber of unique country: 1\n\n\n\ncategorical_columns = ['winery', 'region', 'type']\nnumeric_columns = ['year', 'rating', 'num_reviews', 'price', 'body', 'acidity']\n\nX_categorical = df[categorical_columns]\nX_numeric = df[numeric_columns]\nX_numeric['year'] = pd.to_numeric(X_numeric['year'], errors='coerce')\n\nnan_indices = df['wine'].index[df['wine'].isnull()]\nX_categorical = X_categorical.drop(nan_indices)\nX_numeric = X_numeric.drop(nan_indices)\ny = df['wine'].drop(nan_indices)\n\nnumeric_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='mean')),  \n    ('scaler', StandardScaler()),\n    ('pca', PCA(n_components=2))\n])\n\nX_processed_numeric = numeric_transformer.fit_transform(X_numeric)\n\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),  \n    ('onehot', OneHotEncoder(handle_unknown='ignore', sparse=False))\n])\n\nX_processed_categorical = categorical_transformer.fit_transform(X_categorical)\n\nresult_df_numeric = pd.DataFrame(data=X_processed_numeric, columns=['PC1', 'PC2'])\nresult_df_categorical = pd.DataFrame(X_processed_categorical, columns=categorical_transformer.named_steps['onehot'].get_feature_names_out(categorical_columns))\nresult_df = pd.concat([result_df_numeric, result_df_categorical], axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(result_df, y, test_size=0.2, random_state=42)\n\nnb_model = GaussianNB(var_smoothing=1e-02)\nnb_model.fit(X_train, y_train)\n\npredictions = nb_model.predict(X_test)\n\naccuracy = accuracy_score(y_test, predictions)\nrecall = recall_score(y_test, predictions, average='weighted')  # Change average as needed\nreport = classification_report(y_test, predictions)\n\nprint(f\"Accuracy: {accuracy:.2f}\")\nprint(f\"Recall: {recall:.2f}\")\nprint(\"Classification Report:\")\nprint(report)\n\nAccuracy: 0.82\nRecall: 0.82\nClassification Report:\n                                                               precision    recall  f1-score   support\n\n                                                           17       0.00      0.00      0.00         0\n                                200 Monges Rioja Gran Reserva       0.00      0.00      0.00         0\n                                     200 Monges Rioja Reserva       1.00      1.00      1.00         2\n                  200 Monges Rioja Reserva Seleccion Especial       0.00      0.00      0.00         1\n                                          27 Ribera del Duero       0.00      0.00      0.00         1\n   30 Years V.O.R.S Very Old Palo Cortado Blend Medium Sherry       0.00      0.00      0.00         1\n                                 4 Varietales Coleccion Rioja       0.00      0.00      0.00         1\n                            A Torna dos Pasas Escolma Ribeiro       0.00      0.00      0.00         1\n                                                          AAA       0.00      0.00      0.00         0\n                                                     Albarino       1.00      1.00      1.00         1\n                                          Albarino Pedralonga       1.00      1.00      1.00         1\n                         Alenza Ribera del Duero Gran Reserva       0.00      0.00      0.00         1\n                                Alexander vs. The Ham Factory       0.00      0.00      0.00         1\n                                  Alicante Bouschet by Tarima       0.00      0.00      0.00         0\n                                             Alma Tobia Rioja       0.00      0.00      0.00         1\n                                                        Altar       0.00      0.00      0.00         1\n                                            Alto de la Caseta       1.00      1.00      1.00         1\n                                              Altos de Losada       0.98      1.00      0.99        50\n                                                      Amancio       0.00      0.00      0.00         2\n                                    Amaya Arzuaga (Coleccion)       0.00      0.00      0.00         1\n                                             Amontillado Saca       0.00      0.00      0.00         1\n                                          Amontillado V.O.R.S       0.00      0.00      0.00         1\n                                          Anada Pedro Ximenez       0.00      0.00      0.00         0\n                                       Angel Ribera del Duero       0.00      0.00      0.00         1\n                                            Antigues Reserves       0.00      0.00      0.00         1\n                                         Antique Palo Cortado       0.00      0.00      0.00         1\n                                             Aquilon Garnacha       1.00      1.00      1.00         1\n                                                          Aro       1.00      0.50      0.67         2\n                                                       Arousa       0.00      0.00      0.00         1\n                              Atteca Armas Garnacha Old Vines       0.00      0.00      0.00         1\n                                                        Aurus       0.33      0.50      0.40         2\n                                Baron de Chirel Rioja Reserva       0.25      0.50      0.33         2\n                                                      Barrica       0.00      0.00      0.00         1\n                                          Belondrade y Lurton       1.00      1.00      1.00         3\n                                                       Blanco       0.00      0.00      0.00         2\n                                            Blanco de Parcela       0.00      0.00      0.00         1\n                                             Blecua Somontano       1.00      1.00      1.00         1\n                                                 Branco Vermu       0.00      0.00      0.00         1\n                                               Brega Garnacha       0.00      0.00      0.00         0\n                                                        Bruto       1.00      1.00      1.00         1\n                                             Cabrida Montsant       0.00      0.00      0.00         0\n                                               Calvario Rioja       0.50      0.33      0.40         3\n                                              Cami Pesseroles       1.00      0.50      0.67         4\n                                               Cami de Cormes       0.00      0.00      0.00         1\n                                              Campus Gothorum       0.00      0.00      0.00         1\n                                    Candela Cream Dulce Sweet       1.00      1.00      1.00        43\n                                              Canta la Perdiz       0.00      0.00      0.00         0\n                                                      Capitel       0.00      0.00      0.00         2\n                                   Cardenal Palo Cortado VORS       0.00      0.00      0.00         0\n                                       Cartago Paraje de Pozo       1.00      1.00      1.00         2\n                                        Casa Cisca Monastrell       1.00      1.00      1.00         1\n                   Castillo Ygay Gran Reserva Especial Blanco       0.00      0.00      0.00         1\n                    Castillo Ygay Gran Reserva Especial Tinto       0.33      0.33      0.33         3\n                      Castillo de Monte la Reina Cuvee Privee       0.00      0.00      0.00         0\n                                           Cava Celler Batlle       0.50      1.00      0.67         1\n                                  Cava El Tros Nou Pinot Noir       0.00      0.00      0.00         1\n                         Cava Kripta Gran Reserva Brut Nature       0.50      1.00      0.67         1\n                                 Cava Original Brut (Espumos)       0.00      0.00      0.00         1\n                     Cayetano del Pino Viejisimo Palo Cortado       0.00      0.00      0.00         1\n                                   Cerrado del Castillo Rioja       1.00      1.00      1.00         1\n                                        Cerro La Isa Garnacha       0.00      0.00      0.00         1\n                                                  Clos Adrien       0.33      1.00      0.50         1\n                                           Clos Fonta Priorat       0.75      1.00      0.86         3\n                                                Clos Martinet       0.40      1.00      0.57         2\n                                                 Clos Monlleo       1.00      1.00      1.00         1\n                                               Clos de L'Obac       0.50      1.00      0.67         1\n                                        Clos del Portal Somni       1.00      1.00      1.00        46\n                                           Club Rioja Reserva       0.00      0.00      0.00         1\n                                            Coleccion Privada       1.00      1.00      1.00        46\n                         Coleccion Roberto Amillo Amontillado       0.00      0.00      0.00         0\n                        Coleccion Roberto Amillo Palo Cortado       0.00      0.00      0.00         1\n                                              Coleccion Syrah       0.00      0.00      0.00         1\n                                     Coliseo Amontillado VORS       0.00      0.00      0.00         1\n                                                    Corimbo I       1.00      1.00      1.00        43\n             Corpinnat Enoteca Reserva Particular de Recaredo       0.00      0.00      0.00         1\n                                Corpinnat Terrers Brut Nature       1.00      1.00      1.00         1\n                                                      Cosecha       1.00      1.00      1.00         1\n                                           Coster d'en Fornos       0.00      0.00      0.00         1\n                                                      Crianza       0.00      0.00      0.00         2\n                                                Crianza Tinto       0.00      0.00      0.00         0\n                                    Cuatro Palmas Amontillado       0.00      0.00      0.00         0\n                                        Cuesta de Las Liebres       0.50      1.00      0.67         1\n                                                Cuvee Palomar       0.00      0.00      0.00         0\n                                                Cuvee Verdejo       0.00      0.00      0.00         1\n                                                 Dalmau Rioja       1.00      0.67      0.80         3\n                               Delicado Cosecha Pedro Ximenez       1.00      1.00      1.00         1\n                                                  Dolc Mataro       0.00      0.00      0.00         0\n                                               Dolc de L'Obac       0.00      0.00      0.00         1\n                                            Dominio de Atauta       1.00      1.00      1.00         1\n                                            Dominio del Pidio       0.00      0.00      0.00         2\n                                  Dominio del Verso Red Blend       0.00      0.00      0.00         1\n                                    Don PX Convento Seleccion       1.00      1.00      1.00         2\n                                          Don PX Gran Reserva       0.00      0.00      0.00         0\n                                         Don PX Pedro Ximenez       0.00      0.00      0.00         1\n                                             Don PX Seleccion       0.50      1.00      0.67         1\n                      Doroteo Edicion Especial 25 Aniversario       0.00      0.00      0.00         1\n      Dos Cortados Palo Cortado Solera Especial Aged 20 Years       0.00      0.00      0.00         0\n                                                    El Anejon       0.00      0.00      0.00         1\n                                     El Cabernet F - Familiar       0.00      0.00      0.00         0\n                                           El Canto del Angel       0.00      0.00      0.00         1\n                                                  El Carretil       1.00      0.50      0.67         2\n                                                   El Puntido       0.96      1.00      0.98        27\n                                      El Puntido Gran Reserva       0.00      0.00      0.00         1\n                                         El Reventon Cebreros       0.00      0.00      0.00         1\n                                                  El Rocallis       1.00      1.00      1.00         1\n                                         El Titan del Bendito       0.00      0.00      0.00         0\n                                              El Velado Tinto       0.00      0.00      0.00         1\n                                                     El Viejo       1.00      1.00      1.00        42\n                                                        Elite       1.00      1.00      1.00         1\n                                                Els Escurcons       0.00      0.00      0.00         1\n                                          Emeritvs (Emeritus)       0.00      0.00      0.00         2\n                                      Emporda Aires de Garbet       0.00      0.00      0.00         0\n                               Envidiacochina (Tete de Cuvee)       0.00      0.00      0.00         1\n                           Faustino de Autor Reserva Especial       0.00      0.00      0.00         1\n                                        Finca Biniagual Veran       0.00      0.00      0.00         1\n                                            Finca Cascorrales       0.00      0.00      0.00         0\n                              Finca Cuesta Clara Raro Reserva       0.50      1.00      0.67         1\n                                                   Finca Dofi       0.33      1.00      0.50         1\n                                               Finca El Canto       0.00      0.00      0.00         1\n                                               Finca El Otero       1.00      1.00      1.00         1\n                                   Finca Iscorta Gran Reserva       0.00      0.00      0.00         1\n                              Finca La Colina Sauvignon Blanc       0.00      0.00      0.00         1\n                    Finca La Emperatriz Vinedo Singular Tinto       0.00      0.00      0.00         1\n                                      Finca Las Comas Verdejo       0.00      0.00      0.00         0\n                           Finca Los Hoyales Ribera del Duero       1.00      0.50      0.67         2\n                                                Finca Martelo       0.00      0.00      0.00         1\n                                              Finca Terrerazo       1.00      1.00      1.00        49\n                                              Finca el Bosque       0.33      1.00      0.50         1\n                                     Finca la Atalaya Reserva       0.00      0.00      0.00         0\n                                         Finca la Beata Bobal       0.00      0.00      0.00         1\n                                            Fino La Barajuela       0.00      0.00      0.00         0\n                              Flor de Primavera Peraj Ha'abib       0.00      0.00      0.00         1\n                                       Fondillon Gran Reserva       0.00      0.00      0.00         0\n                                            Formiga de Vellut       0.00      0.00      0.00         0\n                                        Frank Gehry Selection       0.00      0.00      0.00         1\n                                                       Galena       0.00      0.00      0.00         3\n                                   Galiano Seleccion Especial       0.00      0.00      0.00         1\n                               Gallaecia Rias Baixes Albarino       0.00      0.00      0.00         0\n                                                     Garnacha       0.00      0.00      0.00         3\n                                                      Gaudium       0.50      1.00      0.67         1\n                                                      Gessami       1.00      1.00      1.00         1\n                                             Giro de Abargues       0.00      0.00      0.00         1\n                                              Godina Garnacha       0.00      0.00      0.00         0\n                                                     Graciano       0.00      0.00      0.00         0\n                                            Gran Buig Priorat       0.00      0.00      0.00         1\n                                                 Gran Reserva       0.83      0.98      0.90        91\n                                    Gran Reserva Penas Aladas       1.00      0.50      0.67         2\n                                Gran Reserva Ribera del Duero       0.00      0.00      0.00         0\n                                           Gran Reserva Rioja       1.00      1.00      1.00        50\n                              Gran Reserva Rioja (Finca Ygay)       0.50      1.00      0.67         1\n                                         Grandes Anadas Rioja       1.00      1.00      1.00         1\n                                    Granja Gran Reserva Rioja       1.00      1.00      1.00         1\n                                                        Habis       0.00      0.00      0.00         0\n                                          Hacienda Pradolagar       0.00      0.00      0.00         0\n                                              Heretge Priorat       0.00      0.00      0.00         0\n                                               I Gran Reserva       0.50      0.50      0.50         2\n                                                         Idus       0.00      0.00      0.00         0\n                                               Interpretacion       1.00      1.00      1.00         1\nJalifa Amontillado Rare Old Dry Solera Especial Aged 30 Years       0.00      0.00      0.00         1\n                   Juan Piernas Finca El Paso Malo Monastrell       0.00      0.00      0.00         1\n                                                   Juegabolos       0.00      0.00      0.00         0\n                                                        Julia       0.00      0.00      0.00         1\n                                           Jumilla Blue Label       1.00      1.00      1.00         1\n                               L'Ermita Velles Vinyes Priorat       1.00      1.00      1.00         5\n                                                  La Aguilera       0.00      0.00      0.00         1\n                                                   La Baixada       0.00      0.00      0.00         1\n                                                    La Baraja       0.00      0.00      0.00         0\n                                                   La Basseta       1.00      1.00      1.00         1\n                                               La Bienquerida       0.50      1.00      0.67         1\n                                    La Bota 69 de Amontillado       0.00      0.00      0.00         0\n                              La Bota 90 de Manzanilla Pasada       0.00      0.00      0.00         1\n                                                 La Creu Alta       1.00      1.00      1.00         1\n                                       La Cuartilleja Reserva       0.00      0.00      0.00         2\n                                  La Cueva del Contador Rioja       1.00      1.00      1.00         2\n                                       La Hormiga de Antidoto       0.00      0.00      0.00         1\n                                                       La Mar       0.00      0.00      0.00         0\n                                      La Morera de San Lazaro       0.00      0.00      0.00         1\n                                        La Mula de la Quietud       1.00      1.00      1.00         1\n                                                     La Nieta       1.00      1.00      1.00         1\n                                       La Poza de Ballesteros       0.33      1.00      0.50         1\n                                   La Riva Fino Balbaina Alta       0.00      0.00      0.00         0\n                                               La Solana Alta       1.00      1.00      1.00         1\n                                                      La Time       0.00      0.00      0.00         1\n                                                Laderas Rioja       0.00      0.00      0.00         0\n                                         Laderas de Inurrieta       0.00      0.00      0.00         0\n                                      Las Cenizas Tempranillo       0.00      0.00      0.00         1\n                                       Las Iruelas El Tiemblo       0.00      0.00      0.00         0\n                                  Las Lamas Bierzo (Corullon)       1.00      1.00      1.00         1\n                                                   Las Sabias       0.00      0.00      0.00         1\n                                  Le Domaine Blanco de Guarda       1.00      1.00      1.00         1\n                                                      Le Rose       0.00      0.00      0.00         1\n            Lealtanza Coleccion de Artistas Espanoles Sorolla       0.00      0.00      0.00         0\n                                       Les Aubaguetes Priorat       0.00      0.00      0.00         1\n                                                Les Brugueres       1.00      1.00      1.00        40\n                                                   Les Manyes       0.00      0.00      0.00         2\n                                                   Les Tosses       0.00      0.00      0.00         0\n                         Llanos del Almendro Ribera del Duero       1.00      1.00      1.00         2\n                                            Lo Cabalo Reserva       0.00      0.00      0.00         1\n                         Los Dominios de Berceo Prefiloxerico       0.00      0.00      0.00         1\n                                               Los Tabaqueros       0.00      0.00      0.00         0\n                                                        Macan       1.00      1.00      1.00         1\n                                                Macan Clasico       1.00      1.00      1.00         1\n                                                       Malbec       0.00      0.00      0.00         0\n                                                    Malleolus       1.00      1.00      1.00         1\n                                    Malleolus de Sanchomartin       0.33      0.33      0.33         3\n                                    Malleolus de Valderramiro       0.00      0.00      0.00         2\n                                                     Malvasia       0.00      0.00      0.00         0\n                                             Manar dos Seixas       0.00      0.00      0.00         0\n                                                     Manyetes       0.00      0.00      0.00         0\n                                      Maria Remirez de Ganuza       0.00      0.00      0.00         1\n                  Marques de Poley Amontillado Seleccion 1951       0.00      0.00      0.00         1\n                                              Martelo Reserva       0.50      1.00      0.67         1\n                                        Marti Reserva Penedes       0.00      0.00      0.00         2\n                                               Martires Rioja       1.00      1.00      1.00         1\n                              Mas La Plana Cabernet Sauvignon       1.00      1.00      1.00         1\n                                               Mas de la Rosa       0.00      0.00      0.00         1\n                                                       Masdeu       0.00      0.00      0.00         2\n                 Massipa de Scala Dei Garnatxa Blanca - Xenin       0.00      0.00      0.00         0\n                                                    Matallana       1.00      1.00      1.00         1\n                                            Millenium Reserva       0.00      0.00      0.00         0\n                                                        Mirto       1.00      1.00      1.00        36\n                                                      Monreal       0.00      0.00      0.00         0\n                                             Moradillo de Roa       0.00      0.00      0.00         0\n                            Musivari Gran Reserva Brut Nature       0.00      0.00      0.00         1\n                                                      Naiades       0.00      0.00      0.00         1\n                                 Navarra Coleccion 125 Blanco       1.00      1.00      1.00         1\n                                       Nebro Ribera del Duero       1.00      1.00      1.00         1\n                                  Nit de Nin Mas d'en Cacador       0.00      0.00      0.00         2\n                                                       No. 20       0.00      0.00      0.00         0\n                                                       No. 23       0.00      0.00      0.00         1\n                                                       Nobbis       0.00      0.00      0.00         1\n                                                       Nounat       1.00      1.00      1.00        46\n                                                    Numanthia       0.00      0.00      0.00         1\n                                               Nus del Terrer       0.00      0.00      0.00         1\n                                                 Octogenarius       0.50      1.00      0.67         1\n                                                      Oloroso       0.00      0.00      0.00         1\n                                              Oloroso En Rama       0.00      0.00      0.00         1\n                                      Oloroso Extra Viejo 1/7       0.00      0.00      0.00         0\n                                                        Orbus       0.00      0.00      0.00         1\n                               Oscar Tobia Gran Reserva Rioja       0.00      0.00      0.00         0\n                    PS (Pagos Seleccionados) Ribera del Duero       0.00      0.00      0.00         0\n                                           Pago De Valtarrena       0.00      0.00      0.00         1\n                                               Pago El Espino       0.00      0.00      0.00         1\n                                               Pago Negralada       1.00      1.00      1.00         1\n                                         Pago de Las Costanas       0.00      0.00      0.00         1\n                                           Pago de Santa Cruz       1.00      0.50      0.67         2\n             Pago de Santa Cruz Gran Reserva Ribera del Duero       0.00      0.00      0.00         1\n                                     Palmeri Navalta Garnacha       0.00      0.00      0.00         1\n                                                  Pantocrator       0.00      0.00      0.00         1\n                                       Parcela El Nogal Tinto       0.00      0.00      0.00         2\n                                       Parcela El Picon Tinto       0.50      1.00      0.67         1\n                   Parcelas de Maturana Tinta Coleccion Rioja       0.00      0.00      0.00         0\n                                                  Pena Lobera       0.00      0.00      0.00         2\n                                         Penalba Lopez Blanco       0.00      0.00      0.00         0\n                         Perez Pascuas Gran Reserva Seleccion       1.00      1.00      1.00         1\n                                         Perfume de Sonsierra       0.00      0.00      0.00         0\n                                                    Perpetual       1.00      1.00      1.00         1\n                                       Pesus Ribera del Duero       0.00      0.00      0.00         2\n                                                 Petit Verdot       0.11      0.33      0.17         3\n                                                       Pingus       1.00      1.00      1.00         7\n                                                   Pinot Noir       0.00      0.00      0.00         1\n                                       Pla dels Angels Rosado       0.00      0.00      0.00         1\n                                           Porrera Vi de Vila       1.00      1.00      1.00         1\n                                      Prado Enea Gran Reserva       0.50      0.50      0.50         2\n                                                     Preludio       1.00      1.00      1.00        43\n                                                Prieto Picudo       0.00      0.00      0.00         2\n                                                   Primordium       0.00      0.00      0.00         1\n                                                      Priorat       0.40      0.80      0.53         5\n                                        Priorat Vinyes Velles       1.00      0.50      0.67         2\n                                  Purgatori Costers del Segre       1.00      1.00      1.00         2\n                                                           QS       1.00      1.00      1.00         1\n                                                  Quintanilla       0.00      0.00      0.00         1\n                           Recondita Armonia Monastrell Dulce       0.00      0.00      0.00         1\n                                Regina Vides Ribera del Duero       0.33      1.00      0.50         2\n                                            Rejon Tempranillo       1.00      1.00      1.00         2\n                                                      Reserva       0.86      0.52      0.65        73\n                                                Reserva 5 Ano       0.33      1.00      0.50         1\n                                             Reserva Especial       0.00      0.00      0.00         1\n                            Reserva Especial Ribera del Duero       0.00      0.00      0.00         1\n                                       Reserva Especial Rioja       0.00      0.00      0.00         1\n                                        Reserva Privada Rioja       0.00      0.00      0.00         1\n                                     Reserva Ribera del Duero       1.00      1.00      1.00         1\n                                   Reserva Rioja (Finca Ygay)       0.00      0.00      0.00         1\n                                                Reserva Tinto       0.50      0.67      0.57         3\n                                             Reserva Trajanvs       0.00      0.00      0.00         1\n                                                   Reserva XR       0.00      0.00      0.00         0\n                                                      Respeto       1.00      1.00      1.00         1\n                                           Respublica Verdejo       0.00      0.00      0.00         1\n                           Rias Baixas Albarino Finca Valinas       0.98      1.00      0.99        46\n                                             Ribas de Cabrera       0.00      0.00      0.00         1\n                                             Ribera del Duero       0.71      1.00      0.83         5\n                                   Ribera del Duero Prestigio       0.00      0.00      0.00         1\n                                         Ribera del Duero Red       1.00      1.00      1.00         2\n                                     Ribera del Duero Reserva       0.50      1.00      0.67         1\n                                         Ribera del Duero TSM       0.00      0.00      0.00         0\n                                  Ribera del Duero Una Cepa I       1.00      1.00      1.00         1\n                    Ribera del Duero Vendimia Seleccionada VT       0.00      0.00      0.00         1\n                                                        Rioja       0.00      0.00      0.00         1\n                                        Rioja 150 Aniversario       0.00      0.00      0.00         1\n                                                 Rioja Blanco       1.00      1.00      1.00        15\n                                                  Rioja Cisma       0.50      1.00      0.67         1\n                                               Rioja Graciano       0.58      1.00      0.73        42\n                                           Rioja Gran Reserva       0.50      0.20      0.29         5\n                                                  Rioja Norte       0.00      0.00      0.00         1\n                                                Rioja Reserva       0.92      0.92      0.92        48\n                                           Rioja Vina Coqueta       0.00      0.00      0.00         1\n                                                       Roc Nu       1.00      1.00      1.00        53\n                                           Roda Reserva Rioja       1.00      1.00      1.00         2\n                                                   Saca Unica       0.00      0.00      0.00         0\n                                                       Saktih       1.00      1.00      1.00         1\n                                                 Salinas 1237       0.00      0.00      0.00         1\n                                                       Salmos       0.00      0.00      0.00         1\n                                                      Salvaxe       1.00      1.00      1.00         1\n                                            San Vicente Rioja       1.00      1.00      1.00         1\n                                                   Santa Rosa       1.00      1.00      1.00        43\n                                              Sauvignon Blanc       0.00      0.00      0.00         1\n                              Seleccio Especial Vinyes Velles       0.67      1.00      0.80         2\n                                                    Seleccion       0.00      0.00      0.00         0\n                                           Seleccion Especial       0.00      0.00      0.00         0\n                                            Seleccion Privada       1.00      1.00      1.00         1\n                      Seleccion de Anada Albarino Rias Baixas       0.00      0.00      0.00         0\n                              Sericis Cepas Viejas Monastrell       0.00      0.00      0.00         1\n                                                       Sibila       0.00      0.00      0.00         0\n                                               Singular Negre       0.00      0.00      0.00         1\n                                                    Sio Negre       0.00      0.00      0.00         0\n                                                        Sofia       0.67      1.00      0.80         2\n                                                Solera BC-200       0.00      0.00      0.00         1\n                             Solera India Oloroso Rare Sherry       0.00      0.00      0.00         1\n                          Solera PAP Palo Cortado Rare Sherry       0.00      0.00      0.00         0\n                                                    Son Negre       1.00      1.00      1.00         1\n                               St Antoni de Scala Dei Priorat       0.00      0.00      0.00         1\n                                               Syrah (Shiraz)       0.00      0.00      0.00         0\n                                     Taberner Tierra de Cadiz       1.00      1.00      1.00         1\n                                                   Tabuerniga       0.00      0.00      0.00         0\n                                                       Teixar       0.00      0.00      0.00         3\n                                          Tempranillo Reserva       0.00      0.00      0.00         2\n                                                   Termanthia       0.80      1.00      0.89         4\n                                         Terras Gauda O Rosal       0.00      0.00      0.00         1\n                                 Terreus Paraje de Cueva Baja       1.00      1.00      1.00         1\n                                             Tintilla de Rota       1.00      1.00      1.00         1\n                                                        Tinto       0.71      0.42      0.53        12\n                                                           Tm       0.00      0.00      0.00         0\n                                                Tomas Esteban       0.00      0.00      0.00         1\n                                                         Toro       1.00      1.00      1.00         1\n                                                   Torre Muga       0.00      0.00      0.00         0\n                                      Tras Los Muros Albarino       0.00      0.00      0.00         1\n                                                    Trasnocho       0.00      0.00      0.00         0\n                                                   Treixadura       1.00      1.00      1.00        31\n                                                        Triga       1.00      1.00      1.00         1\n                                     Ultreia Valtuille Mencia       0.00      0.00      0.00         1\n                                                        Unico       0.67      0.75      0.71         8\n                               Unico Reserva Especial Edicion       0.00      0.00      0.00         5\n                                                          Uro       0.00      0.00      0.00         1\n                                                        Usted       0.00      0.00      0.00         1\n                                          V Dulce de Invierno       0.00      0.00      0.00         1\n                                                     V2 Tinto       1.00      1.00      1.00         1\n                                                           VS       0.00      0.00      0.00         0\n                                                  Valbuena 5o       0.44      0.80      0.57         5\n                                Valdegatiles Ribera del Duero       0.00      0.00      0.00         2\n                                                   Valdegines       0.95      1.00      0.97        38\n                                  Varietal Fermentacion Lenta       0.00      0.00      0.00         1\n                                          Vatan Tinta de Toro       1.00      1.00      1.00         2\n                                      Vd'O 1 Samso - Pissarra       0.00      0.00      0.00         1\n                                        Vendimia Seleccionada       0.00      0.00      0.00         1\n                                     Vendimia Tardia Moscatel       1.00      1.00      1.00         1\n                                                        Venus       0.00      0.00      0.00         0\n                                             Veraton Garnacha       1.00      1.00      1.00         1\n                                               Vermello Vermu       0.00      0.00      0.00         0\n                                                    Victorino       0.80      1.00      0.89         4\n                                         Vina Alberdi Crianza       1.00      1.00      1.00        48\n                                         Vina Alberdi Reserva       0.00      0.00      0.00         1\n                                         Vina Ardanza Reserva       0.50      1.00      0.67         1\n                                        Vina Bosconia Reserva       1.00      1.00      1.00         1\n                                       Vina Centenaria Mencia       0.00      0.00      0.00         1\n                                                Vina El Pison       1.00      0.80      0.89         5\n                                        Vina Tondonia Reserva       1.00      1.00      1.00         1\n                                 Vina Tondonia Reserva Blanco       0.00      0.00      0.00         1\n                               Vina de Martin Escolma Ribeiro       0.00      0.00      0.00         0\n                                               Vina del Olivo       1.00      1.00      1.00         1\n                                        Vinas Viejas Aguilera       0.00      0.00      0.00         1\n                                         Vinas Viejas Verdejo       0.50      1.00      0.67         2\n                       Vinas Viejas de Soria Ribera Del Duero       1.00      1.00      1.00         2\n                                 Vino de Autor Ribeiro Blanco       0.00      0.00      0.00         1\n                                         Vinyes Altes Porrera       1.00      1.00      1.00         1\n                                       Vinyes Velles de Samso       0.00      0.00      0.00         1\n                                                     Vobiscum       0.00      0.00      0.00         1\n\n                                                     accuracy                           0.82      1500\n                                                    macro avg       0.33      0.36      0.34      1500\n                                                 weighted avg       0.81      0.82      0.81      1500\n\n\n\n\nprint(predictions)\n\n['Son Negre' 'Coleccion Privada' 'Rioja Reserva' ... 'Gran Reserva Rioja'\n 'Clos del Portal Somni' 'Rioja Graciano']\n\n\n\nconf_matrix = confusion_matrix(y_test, predictions)\nconf_matrix_norm = conf_matrix / conf_matrix.sum(axis=1)[:, np.newaxis]\n\nplt.figure(figsize=(40, 30))\nsns.heatmap(conf_matrix_norm, annot=False, cmap='Purples')  \nplt.title('Normalized Confusion Matrix')\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.show()\n# YlGnBu\n\n\n\n\n\npca_model = numeric_transformer.named_steps['pca']\nexplained_variance = pca_model.explained_variance_ratio_\n\nplt.figure(figsize=(8, 6))\nplt.scatter(result_df['PC1'], result_df['PC2'], c='coral', alpha=0.5)\nplt.title('PCA Components: PC1 vs PC2')\nplt.xlabel('Principal Component 1 (PC1)')\nplt.ylabel('Principal Component 2 (PC2)')\n\n# Annotate explained variance\nplt.annotate(f'Explained Variance PC1: {explained_variance[0]:.2f}',\n             xy=(result_df['PC1'].min(), result_df['PC2'].max()), \n             xytext=(result_df['PC1'].min() + 1, result_df['PC2'].max() - 1),\n             arrowprops=dict(facecolor='black', arrowstyle='-&gt;'))\n\nplt.annotate(f'Explained Variance PC2: {explained_variance[1]:.2f}',\n             xy=(result_df['PC1'].max(), result_df['PC2'].min()), \n             xytext=(result_df['PC1'].max() - 2, result_df['PC2'].min() + 1),\n             arrowprops=dict(facecolor='black', arrowstyle='-&gt;'))\n\nplt.grid(True)\nplt.show()\n\n\n\n\n\nsvm = OneClassSVM(nu=0.03) \noutliers_svm = svm.fit_predict(X_processed_numeric)\nresult_df['is_outlier_svm'] = outliers_svm\n\nanomaly_points_svm = result_df[result_df['is_outlier_svm'] == -1]\n\nplt.figure(figsize=(8, 6))\nplt.scatter(result_df['PC1'], result_df['PC2'], alpha=0.5, c='coral', label='Normal')\nplt.scatter(anomaly_points_svm['PC1'], anomaly_points_svm['PC2'], color='red', marker='x', label='Anomaly (SVM)')\nplt.title('PCA Components: PC1 vs PC2 with Anomalies (SVM)')\nplt.xlabel('Principal Component 1 (PC1)')\nplt.ylabel('Principal Component 2 (PC2)')\nplt.legend()\nplt.grid(True)\nplt.show()"
  }
]