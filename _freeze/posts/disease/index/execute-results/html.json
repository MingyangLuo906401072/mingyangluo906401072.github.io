{
  "hash": "a1a3bd036fff1d5a58b83e3ef5e6d1dc",
  "result": {
    "markdown": "---\ntitle: \"Disease Analysis\"\nauthor: \"Mingyang Luo\"\ndate: \"2023-11-05\"\ncategories: [Classification, Anomaly Detection, Clustering]\n---\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.decomposition import PCA\nfrom sklearn.mixture import GaussianMixture\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.inspection import DecisionBoundaryDisplay\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import ConfusionMatrixDisplay\nimport scipy.cluster.hierarchy as sch\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\n\ncsv_file_path = \"health.csv\"\ndf = pd.read_csv(csv_file_path)\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>disease</th>\n      <th>increase</th>\n      <th>loc</th>\n      <th>number</th>\n      <th>population</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>MEASLES</td>\n      <td>334.99</td>\n      <td>ALABAMA</td>\n      <td>8843</td>\n      <td>2640000</td>\n      <td>1928</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>MEASLES</td>\n      <td>200.75</td>\n      <td>ARIZONA</td>\n      <td>847</td>\n      <td>422000</td>\n      <td>1928</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>MEASLES</td>\n      <td>481.77</td>\n      <td>ARKANSAS</td>\n      <td>8899</td>\n      <td>1847000</td>\n      <td>1928</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>MEASLES</td>\n      <td>69.22</td>\n      <td>CALIFORNIA</td>\n      <td>3698</td>\n      <td>5344000</td>\n      <td>1928</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>MEASLES</td>\n      <td>206.98</td>\n      <td>COLORADO</td>\n      <td>2099</td>\n      <td>1014000</td>\n      <td>1928</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>14260</th>\n      <td>PERTUSSIS</td>\n      <td>2.06</td>\n      <td>VIRGINIA</td>\n      <td>171</td>\n      <td>8096604</td>\n      <td>2011</td>\n    </tr>\n    <tr>\n      <th>14261</th>\n      <td>PERTUSSIS</td>\n      <td>10.68</td>\n      <td>WASHINGTON</td>\n      <td>731</td>\n      <td>6830038</td>\n      <td>2011</td>\n    </tr>\n    <tr>\n      <th>14262</th>\n      <td>PERTUSSIS</td>\n      <td>1.99</td>\n      <td>WEST VIRGINIA</td>\n      <td>37</td>\n      <td>1855364</td>\n      <td>2011</td>\n    </tr>\n    <tr>\n      <th>14263</th>\n      <td>PERTUSSIS</td>\n      <td>6.20</td>\n      <td>WISCONSIN</td>\n      <td>351</td>\n      <td>5711767</td>\n      <td>2011</td>\n    </tr>\n    <tr>\n      <th>14264</th>\n      <td>PERTUSSIS</td>\n      <td>1.25</td>\n      <td>WYOMING</td>\n      <td>7</td>\n      <td>568158</td>\n      <td>2011</td>\n    </tr>\n  </tbody>\n</table>\n<p>14265 rows Ã— 6 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nprint(df['disease'].unique())\nprint(df['disease'].value_counts())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['MEASLES' 'POLIO' 'SMALLPOX' 'PERTUSSIS' 'HEPATITIS A' 'RUBELLA' 'MUMPS']\ndisease\nMEASLES        3333\nPERTUSSIS      2716\nHEPATITIS A    2327\nPOLIO          1860\nMUMPS          1576\nRUBELLA        1374\nSMALLPOX       1079\nName: count, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nnumeric_df = df.select_dtypes(include=['number'])\ncols = numeric_df.columns\nscaler = StandardScaler()\nnormalized_data = scaler.fit_transform(numeric_df)\n\npca = PCA(n_components=2)\ndata_pca = pca.fit_transform(normalized_data)\n\nnormalized_df = pd.DataFrame(normalized_data, columns=cols)\nplt.figure(figsize=(8, 4))  \npd.plotting.parallel_coordinates(normalized_df.join(df.disease), class_column='disease', colormap='hsv') \nplt.title('Standardized Parallel Coordinates Plot')\nplt.ylabel('Values')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=674 height=357}\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nnum_samples = 1000 \nsample_indices = np.random.choice(data_pca.shape[0], num_samples, replace=False)\nsampled_data = data_pca[sample_indices]\n\nplt.figure(figsize=(8, 6)) \ndendrogram = sch.dendrogram(sch.linkage(sampled_data, method='ward'), orientation='right')  \nplt.title('Dendrogram (Sampled Data)')\nplt.xlabel('Euclidean Distances')\nplt.ylabel('Data Points')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=655 height=523}\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nexplained_variance = pca.explained_variance_ratio_\ncumulative_explained_variance = explained_variance.cumsum()\n\ngmm = GaussianMixture(n_components=7, random_state=42)\nclusters = gmm.fit_predict(data_pca)\n\nplt.figure(figsize=(8, 6))\nplt.scatter(data_pca[:, 0], data_pca[:, 1], c=clusters, cmap='viridis', alpha=0.7, s=40)\nplt.xlabel(f'Component 1\\nExplained Variance: {explained_variance[0]:.3f}, Cumulative Explained Variance: {cumulative_explained_variance[0]:.3f}')\nplt.ylabel(f'Component 2\\nExplained Variance: {explained_variance[1]:.3f}, Cumulative Explained Variance: {cumulative_explained_variance[1]:.3f}')\nplt.title('Gaussian Mixture Model Clustering after PCA Dimensionality Reduction')\nplt.colorbar(label='Clusters')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){width=646 height=538}\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nX1 = data_pca \ny1 = df['disease']\nlabel_encoder = LabelEncoder()\ny1 = label_encoder.fit_transform(y1)\nfeature_1, feature_2 = np.meshgrid(\n    np.linspace(X1[:, 0].min(), X1[:, 0].max()),\n    np.linspace(X1[:, 1].min(), X1[:, 1].max())\n)\ngrid = np.vstack([feature_1.ravel(), feature_2.ravel()]).T\ntree = DecisionTreeClassifier().fit(X1, y1)\ny_pred1 = tree.predict(grid)\ny_pred1 = y_pred1.reshape(feature_1.shape)\ndisplay = DecisionBoundaryDisplay(xx0=feature_1, xx1=feature_2, response=y_pred1)\ndisplay.plot()\nplt.scatter(X1[:, 0], X1[:, 1], c=y1, edgecolor=\"k\", s=10)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-1.png){width=558 height=411}\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ncluster_data = pd.DataFrame({'Cluster': clusters, 'Class': df['disease']}) \ncluster_summary = cluster_data.groupby('Cluster')['Class'].value_counts().unstack().fillna(0)\nprint(cluster_summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nClass    HEPATITIS A  MEASLES   MUMPS  PERTUSSIS   POLIO  RUBELLA  SMALLPOX\nCluster                                                                    \n0               11.0    216.0    31.0      360.0  1169.0     14.0     859.0\n1             1658.0   1056.0  1047.0     1285.0   360.0    960.0       0.0\n2                6.0    271.0     5.0        8.0     0.0      2.0       0.0\n3              247.0    194.0   177.0      157.0   158.0    194.0      42.0\n4                0.0    687.0    23.0      121.0     5.0      1.0       0.0\n5               16.0    722.0    70.0      363.0   168.0     41.0     178.0\n6              389.0    187.0   223.0      422.0     0.0    162.0       0.0\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ndensities = gmm.score_samples(data_pca)\n\nlower_bound = np.percentile(densities, 0.1)\nanomalies = data_pca[densities < lower_bound]\n\nprint(\"Anomalies:\", anomalies, \"\\n Shape:\", anomalies.shape) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAnomalies: [[10.07872492  0.71333442]\n [14.05229786  5.03523068]\n [12.43006816  6.13229002]\n [13.0640971   1.21331516]\n [13.35301494  6.05062185]\n [13.4855688   4.98454229]\n [18.11348029  9.06984412]\n [16.51090648  5.02577769]\n [13.18315682  7.65367663]\n [13.70015428  6.97071012]\n [14.00925655  6.42533074]\n [11.84210663  1.36010773]\n [10.08348551  0.71877513]\n [10.17446008  7.08024078]\n [-0.37423383  5.14443646]] \n Shape: (15, 2)\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nplt.figure(figsize=(8, 6))\nplt.scatter(data_pca[:, 0], data_pca[:, 1], c=clusters, cmap='viridis', alpha=0.7, s=40)\nplt.xlabel(f'Component 1\\nExplained Variance: {explained_variance[0]:.3f}, Cumulative Explained Variance: {cumulative_explained_variance[0]:.3f}')\nplt.ylabel(f'Component 2\\nExplained Variance: {explained_variance[1]:.3f}, Cumulative Explained Variance: {cumulative_explained_variance[1]:.3f}')\nplt.title('Gaussian Mixture Model Clustering after PCA Dimensionality Reduction')\nplt.colorbar(label='Clusters')\n\nplt.scatter(anomalies[:, 0], anomalies[:, 1], c='red', marker='x', s=100, label='Anomalies')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-10-output-1.png){width=646 height=538}\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nlabels = df['disease']\n\nclassifier = DecisionTreeClassifier(random_state=42)\nclassifier.fit(normalized_data, labels)\n\npredicted_labels = classifier.predict(normalized_data)\nconf_matrix = confusion_matrix(labels, predicted_labels)\n\ndisp = ConfusionMatrixDisplay(conf_matrix, display_labels=classifier.classes_)\ndisp.plot(cmap='viridis', values_format='.0f')\nplt.title('Confusion Matrix for Decision Tree Classifier')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-11-output-1.png){width=584 height=449}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}