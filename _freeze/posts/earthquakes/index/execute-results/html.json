{
  "hash": "31b3f24e5410274252fb3c0546ea449e",
  "result": {
    "markdown": "---\ntitle: \"Earthquake Analysis\"\nauthor: \"Mingyang Luo\"\ndate: \"2023-11-18\"\ncategories: Non-linear Regression, Linear Regression\n---\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import learning_curve\nfrom sklearn.multioutput import MultiOutputRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.linear_model import Lasso\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\n\ncsv_file_path = \"earthquakes.csv\"\ndf = pd.read_csv(csv_file_path)\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>impact.gap</th>\n      <th>impact.magnitude</th>\n      <th>impact.significance</th>\n      <th>location.depth</th>\n      <th>location.distance</th>\n      <th>location.full</th>\n      <th>location.latitude</th>\n      <th>location.longitude</th>\n      <th>location.name</th>\n      <th>time.day</th>\n      <th>time.epoch</th>\n      <th>time.full</th>\n      <th>time.hour</th>\n      <th>time.minute</th>\n      <th>time.month</th>\n      <th>time.second</th>\n      <th>time.year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>nc72666881</td>\n      <td>122.00</td>\n      <td>1.43</td>\n      <td>31</td>\n      <td>15.12</td>\n      <td>0.10340</td>\n      <td>13km E of Livermore, California</td>\n      <td>37.672333</td>\n      <td>-121.619000</td>\n      <td>California</td>\n      <td>27</td>\n      <td>1469593183550</td>\n      <td>2016-07-27 00:19:43</td>\n      <td>0</td>\n      <td>19</td>\n      <td>7</td>\n      <td>43</td>\n      <td>2016</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>us20006i0y</td>\n      <td>30.00</td>\n      <td>4.90</td>\n      <td>371</td>\n      <td>97.07</td>\n      <td>1.43900</td>\n      <td>58km WNW of Pakokku, Burma</td>\n      <td>21.514600</td>\n      <td>94.572100</td>\n      <td>Burma</td>\n      <td>27</td>\n      <td>1469593228220</td>\n      <td>2016-07-27 00:20:28</td>\n      <td>0</td>\n      <td>20</td>\n      <td>7</td>\n      <td>28</td>\n      <td>2016</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>nc72666891</td>\n      <td>249.00</td>\n      <td>0.06</td>\n      <td>0</td>\n      <td>4.39</td>\n      <td>0.02743</td>\n      <td>12km SE of Mammoth Lakes, California</td>\n      <td>37.576500</td>\n      <td>-118.859167</td>\n      <td>California</td>\n      <td>27</td>\n      <td>1469593897150</td>\n      <td>2016-07-27 00:31:37</td>\n      <td>0</td>\n      <td>31</td>\n      <td>7</td>\n      <td>37</td>\n      <td>2016</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>nc72666896</td>\n      <td>122.00</td>\n      <td>0.40</td>\n      <td>2</td>\n      <td>1.09</td>\n      <td>0.02699</td>\n      <td>6km SSW of Mammoth Lakes, California</td>\n      <td>37.595833</td>\n      <td>-118.994833</td>\n      <td>California</td>\n      <td>27</td>\n      <td>1469594144150</td>\n      <td>2016-07-27 00:35:44</td>\n      <td>0</td>\n      <td>35</td>\n      <td>7</td>\n      <td>44</td>\n      <td>2016</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>nn00553447</td>\n      <td>113.61</td>\n      <td>0.30</td>\n      <td>1</td>\n      <td>7.60</td>\n      <td>0.06300</td>\n      <td>16km SSE of Mogul, Nevada</td>\n      <td>39.377500</td>\n      <td>-119.845000</td>\n      <td>Nevada</td>\n      <td>27</td>\n      <td>1469594519667</td>\n      <td>2016-07-27 00:41:59</td>\n      <td>0</td>\n      <td>41</td>\n      <td>7</td>\n      <td>59</td>\n      <td>2016</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>8389</th>\n      <td>nc72685246</td>\n      <td>47.00</td>\n      <td>2.42</td>\n      <td>90</td>\n      <td>4.85</td>\n      <td>0.06167</td>\n      <td>22km ENE of Soledad, California</td>\n      <td>36.515499</td>\n      <td>-121.099831</td>\n      <td>California</td>\n      <td>25</td>\n      <td>1472181541970</td>\n      <td>2016-08-25 23:19:01</td>\n      <td>23</td>\n      <td>19</td>\n      <td>8</td>\n      <td>1</td>\n      <td>2016</td>\n    </tr>\n    <tr>\n      <th>8390</th>\n      <td>ak13879193</td>\n      <td>0.00</td>\n      <td>1.40</td>\n      <td>30</td>\n      <td>50.00</td>\n      <td>0.00000</td>\n      <td>5km ESE of Big Lake, Alaska</td>\n      <td>61.498400</td>\n      <td>-149.862700</td>\n      <td>Alaska</td>\n      <td>25</td>\n      <td>1472181558000</td>\n      <td>2016-08-25 23:19:18</td>\n      <td>23</td>\n      <td>19</td>\n      <td>8</td>\n      <td>18</td>\n      <td>2016</td>\n    </tr>\n    <tr>\n      <th>8391</th>\n      <td>nc72685251</td>\n      <td>165.00</td>\n      <td>1.06</td>\n      <td>17</td>\n      <td>1.73</td>\n      <td>0.02042</td>\n      <td>6km WNW of The Geysers, California</td>\n      <td>38.805000</td>\n      <td>-122.821503</td>\n      <td>California</td>\n      <td>25</td>\n      <td>1472182205600</td>\n      <td>2016-08-25 23:30:05</td>\n      <td>23</td>\n      <td>30</td>\n      <td>8</td>\n      <td>5</td>\n      <td>2016</td>\n    </tr>\n    <tr>\n      <th>8392</th>\n      <td>ci37672328</td>\n      <td>103.00</td>\n      <td>1.55</td>\n      <td>37</td>\n      <td>29.25</td>\n      <td>0.06980</td>\n      <td>6km NNW of Chatsworth, CA</td>\n      <td>34.308000</td>\n      <td>-118.635333</td>\n      <td>California</td>\n      <td>25</td>\n      <td>1472182571880</td>\n      <td>2016-08-25 23:36:11</td>\n      <td>23</td>\n      <td>36</td>\n      <td>8</td>\n      <td>11</td>\n      <td>2016</td>\n    </tr>\n    <tr>\n      <th>8393</th>\n      <td>ci37672360</td>\n      <td>99.00</td>\n      <td>0.89</td>\n      <td>12</td>\n      <td>8.29</td>\n      <td>0.02562</td>\n      <td>14km NE of Yucaipa, CA</td>\n      <td>34.119167</td>\n      <td>-116.933667</td>\n      <td>California</td>\n      <td>25</td>\n      <td>1472183881830</td>\n      <td>2016-08-25 23:58:01</td>\n      <td>23</td>\n      <td>58</td>\n      <td>8</td>\n      <td>1</td>\n      <td>2016</td>\n    </tr>\n  </tbody>\n</table>\n<p>8394 rows Ã— 18 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nnumeric = df.select_dtypes(include=['number'])\nscaler = StandardScaler()\nnumeric1 = scaler.fit_transform(numeric)\nnumeric_df = pd.DataFrame(numeric1)\nnumeric_df.columns = numeric.columns\nnumeric_df.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\nIndex(['impact.gap', 'impact.magnitude', 'impact.significance',\n       'location.depth', 'location.distance', 'location.latitude',\n       'location.longitude', 'time.day', 'time.epoch', 'time.hour',\n       'time.minute', 'time.month', 'time.second', 'time.year'],\n      dtype='object')\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nX = numeric_df[['location.depth', 'location.latitude','location.longitude', 'time.epoch', 'impact.gap']]\ny = numeric_df[['impact.magnitude', 'time.month', 'time.day']]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\npoly_model = MultiOutputRegressor(make_pipeline(PolynomialFeatures(2, include_bias=False), Lasso(alpha=0.4)))\npoly_model.fit(X_train, y_train)\n\npoly_predictions = poly_model.predict(X_test)\nmse = mean_squared_error(y_test, poly_predictions)\nprint(f\"Mean Squared Error: {mse}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMean Squared Error: 0.6435738280241989\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ntrain_sizes, train_scores, test_scores = learning_curve(poly_model, X, y, cv=5, scoring='neg_mean_squared_error')\n\ntrain_scores_mean = -train_scores.mean(axis=1)\ntest_scores_mean = -test_scores.mean(axis=1)\n\nplt.figure()\nplt.title(\"Learning Curve\")\nplt.xlabel(\"Training examples\")\nplt.ylabel(\"MSE\")\n\nplt.plot(train_sizes, train_scores_mean, label=\"Training error\")\nplt.plot(train_sizes, test_scores_mean, label=\"Cross-validation error\")\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=604 height=449}\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ninput_features = ['location.depth', 'location.latitude', 'location.longitude', 'time.epoch', 'impact.gap']\noutput_variables = ['impact.magnitude', 'time.month', 'time.day']\n\nfor input_feat in input_features:\n    plt.figure(figsize=(8, 6))\n\n    for output_var in output_variables:\n        plt.scatter(X_test[input_feat], y_test[output_var], label=f'Actual {output_var}', alpha=0.6)\n        plt.scatter(X_test[input_feat], poly_predictions[:, output_variables.index(output_var)], label=f'Predicted {output_var}', alpha=0.6)\n\n        plt.xlabel(input_feat)\n        plt.ylabel('Output Variables')\n        plt.title(f'Output Variables vs {input_feat}')\n        plt.legend()\n\n    plt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){width=662 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-2.png){width=663 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-3.png){width=662 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-4.png){width=662 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-5.png){width=662 height=523}\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nfor input_feat in input_features:\n    for output_var in output_variables:\n        plt.figure(figsize=(8, 6))\n        \n        # Plot the actual values\n        plt.scatter(X_test[input_feat], y_test[output_var], c='forestgreen', label=f'Actual {output_var}', alpha=0.6)\n        \n        # Plot the predicted values with a line\n        sorted_indices = X_test[input_feat].argsort()\n        plt.plot(X_test[input_feat].values[sorted_indices], poly_predictions[:, output_variables.index(output_var)][sorted_indices], \n                 label=f'Predicted {output_var}', color='chocolate', lw=1)\n\n        plt.xlabel(input_feat)\n        plt.ylabel('Output Variables')\n        plt.title(f'Output Variables vs {input_feat}')\n        plt.legend()\n\n        plt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-1.png){width=662 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-2.png){width=674 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-3.png){width=674 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-4.png){width=663 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-5.png){width=676 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-6.png){width=676 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-7.png){width=662 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-8.png){width=674 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-9.png){width=674 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-10.png){width=662 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-11.png){width=674 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-12.png){width=674 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-13.png){width=662 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-14.png){width=674 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-15.png){width=674 height=523}\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nsvm_model = MultiOutputRegressor(SVR(kernel='rbf', C=0.1))\n\nsvm_model.fit(X_train, y_train)\n\nsvm_predictions = svm_model.predict(X_test)\nmse = mean_squared_error(y_test, svm_predictions)\nprint(f\"Mean Squared Error with SVM: {mse}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMean Squared Error with SVM: 0.3024906988263978\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ntrain_sizes1, train_scores1, test_scores1 = learning_curve(svm_model, X, y, cv=3, scoring='neg_mean_squared_error')\n\ntrain_scores_mean1 = -train_scores1.mean(axis=1)\ntest_scores_mean1 = -test_scores1.mean(axis=1)\n\nplt.figure()\nplt.title(\"Learning Curve\")\nplt.xlabel(\"Training examples\")\nplt.ylabel(\"MSE\")\n\nplt.plot(train_sizes1, train_scores_mean1, label=\"Training error\")\nplt.plot(train_sizes1, test_scores_mean1, label=\"Cross-validation error\")\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-9-output-1.png){width=589 height=449}\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nfor input_feat in input_features:\n    plt.figure(figsize=(8, 6))\n    \n    for output_var in output_variables:\n        # Get the actual and predicted values for the specific output variable\n        actual_values = y_test[output_var]\n        predicted_values = svm_predictions[:, output_variables.index(output_var)]\n        \n        plt.scatter(X_test[input_feat], actual_values, label=f'Actual {output_var}', alpha=0.6)\n        plt.scatter(X_test[input_feat], predicted_values, label=f'Predicted {output_var}', alpha=0.6)\n    \n    plt.xlabel(input_feat)\n    plt.ylabel('Output Variables')\n    plt.title(f'Output Variables vs {input_feat}')\n    plt.legend()\n    plt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-10-output-1.png){width=662 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-10-output-2.png){width=663 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-10-output-3.png){width=662 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-10-output-4.png){width=662 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-10-output-5.png){width=662 height=523}\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nfor input_feat in input_features:\n    for output_var in output_variables:\n        plt.figure(figsize=(8, 6))\n        \n        # Plot the actual values\n        plt.scatter(X_test[input_feat], y_test[output_var], color='palevioletred', label=f'Actual {output_var}', alpha=0.6)\n        \n        # Plot the predicted values with a line\n        sorted_indices = X_test[input_feat].argsort()\n        plt.plot(X_test[input_feat].values[sorted_indices], svm_predictions[:, output_variables.index(output_var)][sorted_indices], \n                 label=f'Predicted {output_var}', color='darkorchid', lw=1)\n\n        plt.xlabel(input_feat)\n        plt.ylabel('Output Variables')\n        plt.title(f'Output Variables vs {input_feat}')\n        plt.legend()\n\n        plt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-11-output-1.png){width=662 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-11-output-2.png){width=674 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-11-output-3.png){width=674 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-11-output-4.png){width=663 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-11-output-5.png){width=676 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-11-output-6.png){width=676 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-11-output-7.png){width=662 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-11-output-8.png){width=674 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-11-output-9.png){width=674 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-11-output-10.png){width=662 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-11-output-11.png){width=674 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-11-output-12.png){width=674 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-11-output-13.png){width=662 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-11-output-14.png){width=674 height=523}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-11-output-15.png){width=674 height=523}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}