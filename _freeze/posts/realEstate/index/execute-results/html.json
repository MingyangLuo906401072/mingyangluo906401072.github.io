{
  "hash": "2a5f3287eb9f3f517032480a20dc5133",
  "result": {
    "markdown": "---\ntitle: \"Real Estate Analysis\"\nauthor: \"Mingyang Luo\"\ndate: \"2023-11-05\"\ncategories: [Linear Regression, Non-linear Regression]\n---\n\nThis post centers on the application of regression techniques with chronological data order.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import learning_curve\nfrom sklearn.decomposition import PCA\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\n\ncsv_file_path = \"real_estate.csv\"\ndf = pd.read_csv(csv_file_path)\ndf.drop('No', axis=1, inplace=True)\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>X1 transaction date</th>\n      <th>X2 house age</th>\n      <th>X3 distance to the nearest MRT station</th>\n      <th>X4 number of convenience stores</th>\n      <th>X5 latitude</th>\n      <th>X6 longitude</th>\n      <th>Y house price of unit area</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2012.917</td>\n      <td>32.0</td>\n      <td>84.87882</td>\n      <td>10</td>\n      <td>24.98298</td>\n      <td>121.54024</td>\n      <td>37.9</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2012.917</td>\n      <td>19.5</td>\n      <td>306.59470</td>\n      <td>9</td>\n      <td>24.98034</td>\n      <td>121.53951</td>\n      <td>42.2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2013.583</td>\n      <td>13.3</td>\n      <td>561.98450</td>\n      <td>5</td>\n      <td>24.98746</td>\n      <td>121.54391</td>\n      <td>47.3</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2013.500</td>\n      <td>13.3</td>\n      <td>561.98450</td>\n      <td>5</td>\n      <td>24.98746</td>\n      <td>121.54391</td>\n      <td>54.8</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2012.833</td>\n      <td>5.0</td>\n      <td>390.56840</td>\n      <td>5</td>\n      <td>24.97937</td>\n      <td>121.54245</td>\n      <td>43.1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>409</th>\n      <td>2013.000</td>\n      <td>13.7</td>\n      <td>4082.01500</td>\n      <td>0</td>\n      <td>24.94155</td>\n      <td>121.50381</td>\n      <td>15.4</td>\n    </tr>\n    <tr>\n      <th>410</th>\n      <td>2012.667</td>\n      <td>5.6</td>\n      <td>90.45606</td>\n      <td>9</td>\n      <td>24.97433</td>\n      <td>121.54310</td>\n      <td>50.0</td>\n    </tr>\n    <tr>\n      <th>411</th>\n      <td>2013.250</td>\n      <td>18.8</td>\n      <td>390.96960</td>\n      <td>7</td>\n      <td>24.97923</td>\n      <td>121.53986</td>\n      <td>40.6</td>\n    </tr>\n    <tr>\n      <th>412</th>\n      <td>2013.000</td>\n      <td>8.1</td>\n      <td>104.81010</td>\n      <td>5</td>\n      <td>24.96674</td>\n      <td>121.54067</td>\n      <td>52.5</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>2013.500</td>\n      <td>6.5</td>\n      <td>90.45606</td>\n      <td>9</td>\n      <td>24.97433</td>\n      <td>121.54310</td>\n      <td>63.9</td>\n    </tr>\n  </tbody>\n</table>\n<p>414 rows Ã— 7 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nX = df.drop('Y house price of unit area', axis=1)\nY = df['Y house price of unit area']\n\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\n\npca = PCA(n_components=2)  \nX_pca = pca.fit_transform(X_scaled)\n\nplt.figure(figsize=(8, 6))\nplt.scatter(X_pca[:, 0], X_pca[:, 1], c=Y, cmap='viridis')\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\nplt.title('PCA Visualization')\nplt.colorbar(label='house price of unit area')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-1.png){width=648 height=523}\n:::\n:::\n\n\nIn this analysis, a linear regression model is applied without accounting for the chronological order of dates within the dataset.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nX_pca = pd.DataFrame(X_pca)\nX_pca_with_date = pd.concat([X_pca, X['X1 transaction date']], axis=1)\n\nX_train_pca, X_test_pca, Y_train, Y_test = train_test_split(X_pca_with_date, Y, test_size=0.2, random_state=42)\n\nX_train_without_date = X_train_pca.drop('X1 transaction date', axis=1)\nX_test_without_date = X_test_pca.drop('X1 transaction date', axis=1)\nX_test_dates = X_test_pca['X1 transaction date']\n\nmodel = LinearRegression()\nmodel.fit(X_train_without_date, Y_train)\n\npredictions = model.predict(X_test_without_date)\n\nplt.figure(figsize=(8, 6))\n\nplt.scatter(range(len(Y_test)), Y_test, color='blue', label='Actual')\nplt.plot(range(len(Y_test)), model.predict(X_test_without_date), color='green', label='Regression Line')\n\nplt.xlabel('Data Points')\nplt.ylabel('Y house price of unit area')\nplt.title('Actual vs. Predicted Price')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=659 height=523}\n:::\n:::\n\n\nThis visual representation showcases the comparison between actual and predicted house prices, arranged in chronological order. The scatter plot juxtaposes actual prices against predictions made by the regression model, sorted according to transaction dates. This ordering provides a clearer view of the model's performance over time, indicating how well it predicts house prices across different chronological points.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nsorted_indices = np.argsort(X_test_dates)\nsorted_dates = X_test_dates.iloc[sorted_indices]\nsorted_predictions = predictions[sorted_indices]\n\nplt.figure(figsize=(8, 6))\nplt.scatter(sorted_dates, Y_test.iloc[sorted_indices], color='red', label='Actual')\nplt.plot(sorted_dates, sorted_predictions, color='orange', label='Sorted Regression Line')\nplt.xlabel('Transaction Date')\nplt.ylabel('Y house price of unit area')\nplt.title('Actual vs. Predicted Price (Sorted by Date)')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=665 height=523}\n:::\n:::\n\n\nPlot the learning curve incorporating standard deviation (std) to provide a measure of score variability for both the training and cross-validation scores. Depict the training and cross-validation scores over varying training set sizes.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndef plot_learning_curve(estimator, X, y):\n    train_sizes, train_scores, val_scores = learning_curve(\n        estimator, X, y, train_sizes=np.linspace(0.1, 1.0, 10), cv=5)\n\n    train_scores_mean = np.mean(train_scores, axis=1)\n    val_scores_mean = np.mean(val_scores, axis=1)\n    train_scores_std = np.std(train_scores, axis=1)\n    val_scores_std = np.std(val_scores, axis=1)\n    val_scores_var_squared = val_scores_std ** 2\n\n    plt.figure(figsize=(8, 6))\n    plt.plot(train_sizes, train_scores_mean, label='Training Score', color='blue')\n    plt.plot(train_sizes, val_scores_mean, label='Cross-Validation Score', color='orange')\n\n    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n                     train_scores_mean + train_scores_std, alpha=0.3, color='blue')\n    plt.fill_between(train_sizes, val_scores_mean - val_scores_std,\n                     val_scores_mean + val_scores_std, alpha=0.3, color='orange')\n\n    plt.xlabel('Training Set Size')\n    plt.ylabel('Score')\n    plt.title('Learning Curve with Std Dev and Squared Variance')\n    plt.legend()\n    plt.grid(True)\n    plt.show()\n\nplot_learning_curve(model, X_train_without_date, Y_train)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){width=672 height=523}\n:::\n:::\n\n\nRandomForestRegressor model is employed to predict house prices over time. This illustrates the effectiveness of the RandomForestRegressor in capturing the complexities and nuances inherent in the dataset's temporal fluctuations.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nforest_model = RandomForestRegressor(n_estimators=100, random_state=42)  \nforest_model.fit(X_train_without_date, Y_train)\n\nforest_predictions = forest_model.predict(X_test_without_date)\n\nyears_test = X_test_dates\n\nplt.figure(figsize=(10, 6))\nplt.scatter(years_test, Y_test, alpha=0.7, c='blueviolet', label='Actual')\n\nsorted_indices = np.argsort(years_test)\nsorted_predictions = forest_predictions[sorted_indices]\nsorted_dates = years_test.iloc[sorted_indices].values\nprint(f\"test transaction dates:\\n{sorted_dates}\")\n\nplt.plot(years_test.iloc[sorted_indices], sorted_predictions, color='deeppink', label='Predicted')\n\nplt.xlabel('Year')\nplt.ylabel('Y house price of unit area')\nplt.title('Actual vs. Predicted Price (Linear Regression)')\nplt.legend()\nplt.grid(True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntest transaction dates:\n[2012.667 2012.667 2012.667 2012.667 2012.667 2012.667 2012.667 2012.75\n 2012.75  2012.75  2012.75  2012.75  2012.75  2012.75  2012.833 2012.833\n 2012.833 2012.833 2012.833 2012.833 2012.833 2012.917 2012.917 2012.917\n 2012.917 2012.917 2012.917 2012.917 2012.917 2012.917 2012.917 2012.917\n 2012.917 2012.917 2013.    2013.    2013.    2013.    2013.    2013.083\n 2013.083 2013.083 2013.083 2013.083 2013.083 2013.083 2013.083 2013.083\n 2013.083 2013.083 2013.083 2013.167 2013.167 2013.167 2013.167 2013.167\n 2013.167 2013.25  2013.25  2013.25  2013.25  2013.25  2013.25  2013.25\n 2013.333 2013.333 2013.417 2013.417 2013.417 2013.417 2013.417 2013.417\n 2013.417 2013.5   2013.5   2013.5   2013.5   2013.583 2013.583 2013.583\n 2013.583 2013.583 2013.583]\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-2.png){width=810 height=523}\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nplot_learning_curve(forest_model, X_train_without_date, Y_train)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-8-output-1.png){width=663 height=523}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}